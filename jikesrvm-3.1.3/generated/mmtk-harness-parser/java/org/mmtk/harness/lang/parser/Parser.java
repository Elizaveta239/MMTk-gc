/* Generated By:JavaCC: Do not edit this line. Parser.java */
package org.mmtk.harness.lang.parser;

// CHECKSTYLE:OFF
import org.mmtk.harness.lang.ast.*;
import org.mmtk.harness.lang.runtime.*;
import org.mmtk.harness.lang.type.*;
import java.util.*;
import java.io.*;

public class Parser implements ParserConstants {
        private static BufferedInputStream createStream(String filename) {
                try {
                  return new BufferedInputStream(new FileInputStream(filename));
                } catch (Exception e) {
                        throw new RuntimeException(e);
                }
        }
        public Parser(String filename) {
                this(createStream(filename));
                AbstractAST.setCurrentSource(new Source(filename));
        }

        private static void checkSymbol(SymbolTable symbols, Token tok) throws ParseException {
                String id = tok.toString();
                if (!symbols.isDefined(id)) {
                 throw new ParseException(
                   String.format("%d:%d - Variable %s is undefined",tok.beginLine,tok.beginColumn,id));
           }
        }

        private static Type createTypeReference(TypeTable types, String name) {
                if (types.isDefined(name)) {
                        return types.get(name);
                }
                return new TypeReference(types,name);
        }

  final public MethodTable script() throws ParseException {
  GlobalDefs defs = new GlobalDefs();
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        method(defs);
      } else if (jj_2_2(2)) {
        typeDeclaration(defs);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_3(2)) {
        ;
      } else {
        break label_1;
      }
    }
    jj_consume_token(0);
    {if (true) return defs.methods;}
    throw new Error("Missing return statement in function");
  }

/**
 * A program method with its own variable scope.
 */
  final public void method(GlobalDefs defs) throws ParseException {
    SymbolTable symbols = new SymbolTable();
    Statement stmt;
    String name;
    int params = 0;
    Type retType;
    String javaClass, javaMethod, javaParam;
    List<String> signature = new ArrayList<String>();
    Token t;
    retType = type(defs);
    t = jj_consume_token(IDENTIFIER);
                   name = t.toString();
    jj_consume_token(LPAREN);
    if (jj_2_5(2)) {
      declaration1(defs, symbols);
                                  params++;
      label_2:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(COMMA);
        declaration1(defs, symbols);
                                                                                      params++;
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    if (jj_2_9(2)) {
      stmt = statements(defs, symbols);
      defs.methods.add(new NormalMethod(t, name, params, retType, symbols.declarations(), stmt));
    } else if (jj_2_10(2)) {
      jj_consume_token(INTRINSIC);
      jj_consume_token(CLASS);
      javaClass = string();
      jj_consume_token(METHOD);
      javaMethod = string();
      if (jj_2_8(2)) {
        jj_consume_token(SIGNATURE);
        jj_consume_token(LPAREN);
        if (jj_2_7(2)) {
          intrinsicParam(signature);
          label_3:
          while (true) {
            if (jj_2_6(2)) {
              ;
            } else {
              break label_3;
            }
            jj_consume_token(COMMA);
            intrinsicParam(signature);
          }
        } else {
          ;
        }
        jj_consume_token(RPAREN);
      } else {
        ;
      }
      jj_consume_token(SEMICOLON);
        defs.methods.add(new IntrinsicMethod(name,javaClass,javaMethod,signature));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void intrinsicParam(List<String> signature) throws ParseException {
        String javaParam;
    javaParam = string();
            if (javaParam.equals("org.mmtk.harness.lang.Env")) {
                  {if (true) throw new ParseException("Env parameter to intrinsic methods is implicit!");}
            }
                signature.add(javaParam);
  }

/**
 * A Type Declaration
 */
  final public void typeDeclaration(GlobalDefs defs) throws ParseException {
        Token t;
    jj_consume_token(TYPE);
    t = jj_consume_token(IDENTIFIER);
          UserType type = new UserTypeImpl(t,t.toString());
      defs.types.add(type);
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      typeField(defs,type);
      if (jj_2_11(2)) {
        ;
      } else {
        break label_4;
      }
    }
    jj_consume_token(RBRACE);
  }

  final public void typeField(GlobalDefs defs, UserType type) throws ParseException {
        String fieldType, name;
    fieldType = ident();
    name = ident();
    jj_consume_token(SEMICOLON);
          type.defineField(name, createTypeReference(defs.types,fieldType));
  }

/**
 * A sequence of statements in braces, carrying an inner variable scope
 */
  final public Statement statements(GlobalDefs defs, SymbolTable symbols) throws ParseException {
    Statement stmt;
    List<Statement> stmts = new ArrayList<Statement>();
    Token t;
    t = jj_consume_token(LBRACE);
    symbols.pushScope();
    label_5:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_5;
      }
      stmt = statement(defs, symbols);
      stmts.add(stmt);
    }
    symbols.popScope();
    jj_consume_token(RBRACE);
    {if (true) return new Sequence(t,stmts);}
    throw new Error("Missing return statement in function");
  }

/**
 * A single statement
 */
  final public Statement statement(GlobalDefs defs, SymbolTable symbols) throws ParseException {
    Statement stmt;
    Token t;
    if (jj_2_17(2)) {
      stmt = conditional(defs, symbols);
    } else if (jj_2_18(2)) {
      stmt = expect(defs, symbols);
      jj_consume_token(SEMICOLON);
    } else if (jj_2_19(2)) {
      stmt = spawn(defs, symbols);
      jj_consume_token(SEMICOLON);
    } else if (jj_2_20(2)) {
      stmt = whileLoop(defs, symbols);
    } else if (jj_2_21(2)) {
      stmt = print(defs, symbols);
      jj_consume_token(SEMICOLON);
    } else if (jj_2_22(2)) {
      stmt = assertTrue(defs, symbols);
      jj_consume_token(SEMICOLON);
    } else if (jj_2_23(2)) {
      t = jj_consume_token(IDENTIFIER);
      if (jj_2_13(2)) {
        stmt = assignment(defs, symbols, t);
        jj_consume_token(SEMICOLON);
      } else if (jj_2_14(2)) {
        stmt = declaration(defs, symbols, t);
        jj_consume_token(SEMICOLON);
      } else if (jj_2_15(2)) {
        stmt = storeField(defs, symbols, t);
        jj_consume_token(SEMICOLON);
      } else if (jj_2_16(2)) {
        stmt = callMethod(defs, symbols, t);
        jj_consume_token(SEMICOLON);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_24(2)) {
      stmt = returnStmt(defs, symbols);
      jj_consume_token(SEMICOLON);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

/**
 * if - then - else
 */
  final public Statement conditional(GlobalDefs defs, SymbolTable symbols) throws ParseException {
        Expression cond;
    List<Expression> conds = new ArrayList<Expression>();
    Statement stmt;
    List<Statement> stmts = new ArrayList<Statement>();
    Token t;
    t = jj_consume_token(IF);
    jj_consume_token(LPAREN);
    cond = expression(defs,symbols);
                                                  conds.add(cond);
    jj_consume_token(RPAREN);
    stmt = statements(defs, symbols);
                                   stmts.add(stmt);
    label_6:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(ELIF);
      jj_consume_token(LPAREN);
      cond = expression(defs,symbols);
                                                     conds.add(cond);
      jj_consume_token(RPAREN);
      stmt = statements(defs, symbols);
                                         stmts.add(stmt);
    }
    if (jj_2_26(2)) {
      jj_consume_token(ELSE);
      stmt = statements(defs, symbols);
                                             stmts.add(stmt);
    } else {
      ;
    }
    {if (true) return new IfStatement(t,conds,stmts);}
    throw new Error("Missing return statement in function");
  }

/**
 * assert the expression in the first parameter,
 * and print the remaining parameters if the assertion fails
 */
  final public Statement assertTrue(GlobalDefs defs, SymbolTable symbols) throws ParseException {
    Expression cond;
    List<Expression> exprs = new ArrayList<Expression>();
    Expression expr;
    Token t;
    t = jj_consume_token(ASSERT);
    jj_consume_token(LPAREN);
    cond = expression(defs,symbols);
    label_7:
    while (true) {
      jj_consume_token(COMMA);
      expr = expression(defs,symbols);
      exprs.add(expr);
      if (jj_2_27(2)) {
        ;
      } else {
        break label_7;
      }
    }
    jj_consume_token(RPAREN);
    {if (true) return new Assert(t,cond, exprs);}
    throw new Error("Missing return statement in function");
  }

/**
 * while loop
 */
  final public Statement whileLoop(GlobalDefs defs, SymbolTable symbols) throws ParseException {
    Expression cond;
    Statement body;
    Token t;
    t = jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    cond = expression(defs,symbols);
    jj_consume_token(RPAREN);
    body = statements(defs, symbols);
    {if (true) return new WhileStatement(t,cond,body);}
    throw new Error("Missing return statement in function");
  }

/**
 * Variable declaration, and optional initializing assignment
 *
 * Adds a symbol to the symbol table, and returns either an
 * assignment statement or an empty sequence.
 */
  final public Statement declaration(GlobalDefs defs, SymbolTable symbols, Token id) throws ParseException {
    String name;
    Expression expr;
    Statement stmt;
    Token t;
    name = declaration2(defs, symbols,id);
    if (jj_2_28(2)) {
      t = jj_consume_token(ASSIGN);
      expr = expression(defs,symbols);
          {if (true) return new Assignment(t,symbols.getSymbol(name), expr);}
    } else {
      ;
    }
    {if (true) return new Empty();}
    throw new Error("Missing return statement in function");
  }

/**
 * First part of variable declaration (without initialization).
 *
 * Adds a symbol to the symbol table and returns the name.
 */
  final public String declaration1(GlobalDefs defs, SymbolTable symbols) throws ParseException {
    String name;
    Type type;
    type = type(defs);
    name = ident();
        symbols.declare(name,type);
       {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

/**
 * First part of variable declaration (without initialization),
 * where the parent production has consumed the type identifier token.
 *
 * Adds a symbol to the symbol table and returns the name.
 */
  final public String declaration2(GlobalDefs defs, SymbolTable symbols, Token id) throws ParseException {
    String name;
    Type type = defs.types.get(id.toString());
    /* type - consumed by parent */
       name = ident();
        symbols.declare(name,type);
       {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public Type type(GlobalDefs defs) throws ParseException {
        String type;
    type = ident();
                {if (true) return defs.types.get(type);}
    throw new Error("Missing return statement in function");
  }

/*
 * Set up an expectation for an exception
 */
  final public Statement expect(GlobalDefs defs, SymbolTable symbols) throws ParseException {
    String name;
    Token t;
    t = jj_consume_token(EXPECT);
    jj_consume_token(LPAREN);
    name = ident();
    jj_consume_token(RPAREN);
      {if (true) return new Expect(t,name);}
    throw new Error("Missing return statement in function");
  }

/*
 * Assign a value to a variable
 */
  final public Statement assignment(GlobalDefs defs, SymbolTable symbols, Token id) throws ParseException {
    String name = id.toString();
    Expression expr;
    Token t;
    t = jj_consume_token(ASSIGN);
    expr = expression(defs,symbols);
      {if (true) return new Assignment(t,symbols.getSymbol(name),expr);}
    throw new Error("Missing return statement in function");
  }

/*
 * Assign a value to a field of an object
 */
  final public Statement storeField(GlobalDefs defs, SymbolTable symbols, Token id) throws ParseException {
    Symbol objectSym = symbols.getSymbol(id.toString());
    Expression index, rVal;
    Token fieldId;
    checkSymbol(symbols,id);
    jj_consume_token(DOT);
    fieldId = jj_consume_token(IDENTIFIER);
    if (jj_2_29(2)) {
      jj_consume_token(LBRACKET);
      index = expression(defs,symbols);
      jj_consume_token(RBRACKET);
      jj_consume_token(ASSIGN);
      rVal = expression(defs,symbols);
        Type fieldType = defs.types.get(fieldId.toString());
        {if (true) return new StoreField(id, objectSym, fieldType, index, rVal);}
    } else if (jj_2_30(2)) {
      jj_consume_token(ASSIGN);
      rVal = expression(defs,symbols);
        String fieldName = fieldId.toString();
        {if (true) return new StoreNamedField(id, objectSym, fieldName, rVal);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Procedure call, as a statement
 */
  final public Statement callMethod(GlobalDefs defs, SymbolTable symbols, Token id) throws ParseException {
    String name = id.toString();
    List<Expression> params = new ArrayList<Expression>();
    Expression p;
    jj_consume_token(LPAREN);
    if (jj_2_32(2)) {
      p = expression(defs,symbols);
        params.add(p);
      label_8:
      while (true) {
        if (jj_2_31(2)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(COMMA);
        p = expression(defs,symbols);
        params.add(p);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return new Call(id, new MethodProxy(defs.methods, name, params.size()), params, false);}
    throw new Error("Missing return statement in function");
  }

/**
 * Return a value from a method
 */
  final public Statement returnStmt(GlobalDefs defs, SymbolTable symbols) throws ParseException {
        Expression e;
        Token t;
    t = jj_consume_token(RETURN);
    if (jj_2_33(2)) {
      e = expression(defs,symbols);
            {if (true) return new Return(t, e);}
    } else {
      ;
    }
          {if (true) return new Return(t);}
    throw new Error("Missing return statement in function");
  }

/*
 * Create a new thread
 */
  final public Statement spawn(GlobalDefs defs, SymbolTable symbols) throws ParseException {
    String name;
    List<Expression> params = new ArrayList<Expression>();
    Expression p;
    Token t;
    t = jj_consume_token(SPAWN);
    jj_consume_token(LPAREN);
    name = ident();
    label_9:
    while (true) {
      if (jj_2_34(2)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(COMMA);
      p = expression(defs,symbols);
      params.add(p);
    }
    jj_consume_token(RPAREN);
    {if (true) return new Spawn(t, defs.methods, name, params);}
    throw new Error("Missing return statement in function");
  }

  final public Statement print(GlobalDefs defs, SymbolTable symbols) throws ParseException {
    List<Expression> exprs = new ArrayList<Expression>();
    Expression expr;
    Token t;
    t = jj_consume_token(PRINT);
    jj_consume_token(LPAREN);
    expr = expression(defs,symbols);
      exprs.add(expr);
    label_10:
    while (true) {
      if (jj_2_35(2)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(COMMA);
      expr = expression(defs,symbols);
      exprs.add(expr);
    }
    jj_consume_token(RPAREN);
    {if (true) return new PrintStatement(t, exprs);}
    throw new Error("Missing return statement in function");
  }

/*******************************************************************************
 *              Arithmetic expressions
 *
 *  Complicated slightly by the fact that we don't (currently) have a mechanism
 *  for enumerating temporaries at GC time.  Therefore, method calls as expressions
 *  can only occur at the top level of an expression.
 */
  final public Expression expression(GlobalDefs defs, SymbolTable symbols) throws ParseException {
    Expression e1,e2;
    Token t;
    e1 = expr1(defs,symbols);
    if (jj_2_38(2)) {
      if (jj_2_36(2)) {
        t = jj_consume_token(SC_OR);
        e2 = expression(defs,symbols);
        {if (true) return new BinaryExpression(t, e1, Operator.OR, e2);}
      } else if (jj_2_37(2)) {
        t = jj_consume_token(SC_AND);
        e2 = expression(defs,symbols);
        {if (true) return new BinaryExpression(t, e1, Operator.AND, e2);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expr1(GlobalDefs defs, SymbolTable symbols) throws ParseException {
    Expression e;
    Token t;
    if (jj_2_39(2)) {
      t = jj_consume_token(BANG);
      e = expr1(defs,symbols);
    {if (true) return new UnaryExpression(t,Operator.NOT,e);}
    } else if (jj_2_40(2)) {
      t = jj_consume_token(MINUS);
      e = expr1(defs,symbols);
    {if (true) return new UnaryExpression(t,Operator.MINUS,e);}
    } else if (jj_2_41(2)) {
      e = expr2(defs,symbols);
                          {if (true) return e;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression expr2(GlobalDefs defs, SymbolTable symbols) throws ParseException {
    Expression e1,e2;
    Token t;
    e1 = expr3(defs,symbols);
    if (jj_2_48(2)) {
      if (jj_2_42(2)) {
        t = jj_consume_token(LT);
        e2 = expr3(defs,symbols);
        {if (true) return new BinaryExpression(t, e1,Operator.LT,e2);}
      } else if (jj_2_43(2)) {
        t = jj_consume_token(GT);
        e2 = expr3(defs,symbols);
        {if (true) return new BinaryExpression(t, e1,Operator.GT,e2);}
      } else if (jj_2_44(2)) {
        t = jj_consume_token(LE);
        e2 = expr3(defs,symbols);
        {if (true) return new BinaryExpression(t, e1,Operator.LE,e2);}
      } else if (jj_2_45(2)) {
        t = jj_consume_token(GE);
        e2 = expr3(defs,symbols);
        {if (true) return new BinaryExpression(t, e1,Operator.GE,e2);}
      } else if (jj_2_46(2)) {
        t = jj_consume_token(EQ);
        e2 = expr3(defs,symbols);
        {if (true) return new BinaryExpression(t, e1,Operator.EQ,e2);}
      } else if (jj_2_47(2)) {
        t = jj_consume_token(NE);
        e2 = expr3(defs,symbols);
        {if (true) return new BinaryExpression(t, e1,Operator.NE,e2);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expr3(GlobalDefs defs, SymbolTable symbols) throws ParseException {
    Expression e1,e2;
    Token t;
    e1 = expr4(defs,symbols);
    if (jj_2_51(2)) {
      if (jj_2_49(2)) {
        t = jj_consume_token(PLUS);
        e2 = expr3(defs,symbols);
        {if (true) return new BinaryExpression(t, e1,Operator.PLUS,e2);}
      } else if (jj_2_50(2)) {
        t = jj_consume_token(MINUS);
        e2 = expr3(defs,symbols);
        {if (true) return new BinaryExpression(t, e1,Operator.MINUS,e2);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expr4(GlobalDefs defs, SymbolTable symbols) throws ParseException {
    Expression e1,e2;
    Token t;
    e1 = expr5(defs,symbols);
    if (jj_2_55(2)) {
      if (jj_2_52(2)) {
        t = jj_consume_token(STAR);
        e2 = expr4(defs,symbols);
        {if (true) return new BinaryExpression(t, e1, Operator.MULT, e2);}
      } else if (jj_2_53(2)) {
        t = jj_consume_token(SLASH);
        e2 = expr4(defs,symbols);
        {if (true) return new BinaryExpression(t, e1, Operator.DIV, e2);}
      } else if (jj_2_54(2)) {
        t = jj_consume_token(REM);
        e2 = expr4(defs,symbols);
        {if (true) return new BinaryExpression(t, e1, Operator.REM, e2);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expr5(GlobalDefs defs, SymbolTable symbols) throws ParseException {
    Expression e, index;
    String id;
    Token t, field;
    if (jj_2_60(2)) {
      /* constants of various types */
        e = constant();
                 {if (true) return e;}
    } else if (jj_2_61(2)) {
      /* intrinsic functions */
        e = alloc(defs,symbols);
                          {if (true) return e;}
    } else if (jj_2_62(2)) {
      jj_consume_token(LPAREN);
      e = expression(defs,symbols);
      jj_consume_token(RPAREN);
      {if (true) return e;}
    } else if (jj_2_63(2)) {
      t = jj_consume_token(IDENTIFIER);
                     id=t.toString();
      if (jj_2_59(2)) {
        if (jj_2_57(2)) {
          jj_consume_token(DOT);
          field = jj_consume_token(IDENTIFIER);
                    checkSymbol(symbols,t);
          if (jj_2_56(2)) {
            jj_consume_token(LBRACKET);
            index = expression(defs,symbols);
            jj_consume_token(RBRACKET);
                Type type = defs.types.get(field.toString());
                {if (true) return new LoadField(t,symbols.getSymbol(id), type, index);}
          } else {
                  String fieldName = field.toString();
                  {if (true) return new LoadNamedField(t,symbols.getSymbol(id), fieldName);}
          }
        } else if (jj_2_58(2)) {
          e = callExpr(t,id,defs,symbols);
                                          {if (true) return e;}
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
       if (defs.types.isDefined(id)) {
         {if (true) return new TypeLiteral(t,defs.types.get(id));}
       }
       checkSymbol(symbols,t);
       {if (true) return new Variable(t,symbols.getSymbol(id));}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression constant() throws ParseException {
    Token t;
    if (jj_2_64(2)) {
      /* Null constant */
        t = jj_consume_token(NULL);
      {if (true) return new Constant(t, ObjectValue.NULL);}
    } else if (jj_2_65(2)) {
      t = jj_consume_token(INTEGER_LITERAL);
      {if (true) return new Constant(t, IntValue.valueOf(Integer.valueOf(t.toString())));}
    } else if (jj_2_66(2)) {
      t = jj_consume_token(BOOLEAN_LITERAL);
      {if (true) return new Constant(t, BoolValue.valueOf(Boolean.valueOf(t.toString())));}
    } else if (jj_2_67(2)) {
      t = jj_consume_token(STRING_LITERAL);
        String s = t.toString();
        {if (true) return new Constant(t, new StringValue(s.substring(1, s.length() - 1)));}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Procedure call, as an expression.
 *
 * Caller has matched the method name, which gets passed as the 'name' parameter.
 * 't' is the token of the method name (for error location).
 */
  final public Expression callExpr(Token t, String name, GlobalDefs defs, SymbolTable symbols) throws ParseException {
    List<Expression> params = new ArrayList<Expression>();
    Expression p;
    jj_consume_token(LPAREN);
    if (jj_2_69(2)) {
      p = expression(defs,symbols);
        params.add(p);
      label_11:
      while (true) {
        if (jj_2_68(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(COMMA);
        p = expression(defs,symbols);
        params.add(p);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return new Call(t,new MethodProxy(defs.methods, name, params.size()), params, true);}
    throw new Error("Missing return statement in function");
  }

  final public Expression alloc(GlobalDefs defs, SymbolTable symbols) throws ParseException {
        AllocationSite site;
        Token t;
        List<Expression> args = new ArrayList<Expression>();
        Expression arg;
    t = jj_consume_token(ALLOC);
              site = new AllocationSite(t);
    jj_consume_token(LPAREN);
    arg = expression(defs,symbols);
                                   args.add(arg);
    label_12:
    while (true) {
      if (jj_2_70(2)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(COMMA);
      arg = expression(defs,symbols);
                                             args.add(arg);
    }
    jj_consume_token(RPAREN);
      {if (true) return new Alloc(t, site.getId(), args);}
    throw new Error("Missing return statement in function");
  }

/***************************************************************************
 *               Utility rules
 */

/*
 * Match an identifier and return it as a string
 */
  final public String ident() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
                   {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

/*
 * Match an integer literal and return it as an int
 */
  final public int integer() throws ParseException {
    Token t;
    t = jj_consume_token(INTEGER_LITERAL);
                        {if (true) return Integer.parseInt(t.toString());}
    throw new Error("Missing return statement in function");
  }

/*
 * Match a boolean literal and return it as a boolean
 */
  final public boolean bool() throws ParseException {
    Token t;
    t = jj_consume_token(BOOLEAN_LITERAL);
                        {if (true) return Boolean.parseBoolean(t.toString());}
    throw new Error("Missing return statement in function");
  }

/*
 * Match a string literal and return the contents as a string
 */
  final public String string() throws ParseException {
    Token t;
    String s;
    t = jj_consume_token(STRING_LITERAL);
                       s = t.toString(); {if (true) return s.substring(1, s.length() - 1);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  final private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  final private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  final private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  final private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  final private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  final private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  final private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  final private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  final private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  final private boolean jj_3_47() {
    if (jj_scan_token(NE)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_39()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) return true;
    }
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_70() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(ALLOC)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_68() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(SPAWN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(ELIF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_69() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3_67() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_66() {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_65() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_64() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3_56() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_58() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_57() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) return true;
    }
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_40()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_63() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_62() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_61() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_60() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(EXPECT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_54() {
    if (jj_scan_token(REM)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(SIGNATURE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    }
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(INTRINSIC)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_39()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[70];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[55];
    for (int i = 0; i < 55; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 70; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
