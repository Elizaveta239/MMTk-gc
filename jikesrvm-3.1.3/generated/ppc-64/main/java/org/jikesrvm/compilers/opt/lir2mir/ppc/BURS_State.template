// program generated file, do not edit

	// cost for each non-terminal
	public char cost_stm;
	public char cost_r;
	public char cost_czr;
	public char cost_rs;
	public char cost_rz;
	public char cost_rp;
	public char cost_any;
	public char cost_boolcmp;

	// rule for each non-terminal
	public int word0;
	   // stm; word:0 offset:0, bits:7, 82 rules);
	   // r; word:0 offset:7, bits:7, 122 rules);
	   // czr; word:0 offset:14, bits:1, 1 rules);
	   // rs; word:0 offset:15, bits:5, 19 rules);
	   // rz; word:0 offset:20, bits:4, 10 rules);
	   // rp; word:0 offset:24, bits:4, 15 rules);
	   // any; word:0 offset:28, bits:3, 6 rules);
	public int word1;
	   // boolcmp; word:1 offset:0, bits:4, 8 rules);

	public char getCost(int goalNT) {
		switch(goalNT) {
		case stm_NT:    return cost_stm;
		case r_NT:    return cost_r;
		case czr_NT:    return cost_czr;
		case rs_NT:    return cost_rs;
		case rz_NT:    return cost_rz;
		case rp_NT:    return cost_rp;
		case any_NT:    return cost_any;
		default:       return cost_boolcmp;
		}
	}

	public void initCost() {
		cost_stm = 
		cost_r = 
		cost_czr = 
		cost_rs = 
		cost_rz = 
		cost_rp = 
		cost_any = 
		cost_boolcmp = 
		      0x7fff;
		word0 = 0;
		word1 = 0;

	}

	public int rule(int goalNT) {
		int statement = 0;
		switch(goalNT) {
		case stm_NT:  statement= (word0 & 0x7F); break;// stm
		case r_NT:  statement= ((word0 >>> 7) & 0x7F); break;// r
		case czr_NT:  statement= ((word0 >>> 14) & 0x1); break;// czr
		case rs_NT:  statement= ((word0 >>> 15) & 0x1F); break;// rs
		case rz_NT:  statement= ((word0 >>> 20) & 0xF); break;// rz
		case rp_NT:  statement= ((word0 >>> 24) & 0xF); break;// rp
		case any_NT:  statement= ((word0 >>> 28) & 0x7); break;// any
		default:     statement= (word1 & 0xF); break;// boolcmp
		}
		return BURS_STATE.decode[goalNT][statement];
	}
}

