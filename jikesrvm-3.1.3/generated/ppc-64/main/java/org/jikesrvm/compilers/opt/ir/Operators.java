/*
 *  This file is part of the Jikes RVM project (http://jikesrvm.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License. You
 *  may obtain a copy of the License at
 *
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  See the COPYRIGHT.txt file distributed with this work for information
 *  regarding copyright ownership.
 */

/*
 * THIS FILE IS MACHINE GENERATED. DO NOT EDIT.
 * The input files are:
 *  Operators.template
 *  OperatorList.dat
 *  /home/elizabeth/sum13/ideal/jikesrvm-3.1.3/generated/PPC-64bit_OperatorList.dat
 */

package org.jikesrvm.compilers.opt.ir;

import org.jikesrvm.compilers.opt.ir.ppc.MachineSpecificIRPowerPC;

/**
 * Interface with all operator names and opcodes.
 *
 * @see Operator
 */
public interface Operators {

  MachineSpecificIR helper =
                                              MachineSpecificIRPowerPC.PPC64.singleton;

  char GET_CAUGHT_EXCEPTION_opcode = (char)0;
  char SET_CAUGHT_EXCEPTION_opcode = (char)1;
  char NEW_opcode = (char)2;
  char NEW_UNRESOLVED_opcode = (char)3;
  char NEWARRAY_opcode = (char)4;
  char NEWARRAY_UNRESOLVED_opcode = (char)5;
  char ATHROW_opcode = (char)6;
  char CHECKCAST_opcode = (char)7;
  char CHECKCAST_NOTNULL_opcode = (char)8;
  char CHECKCAST_UNRESOLVED_opcode = (char)9;
  char MUST_IMPLEMENT_INTERFACE_opcode = (char)10;
  char INSTANCEOF_opcode = (char)11;
  char INSTANCEOF_NOTNULL_opcode = (char)12;
  char INSTANCEOF_UNRESOLVED_opcode = (char)13;
  char MONITORENTER_opcode = (char)14;
  char MONITOREXIT_opcode = (char)15;
  char NEWOBJMULTIARRAY_opcode = (char)16;
  char GETSTATIC_opcode = (char)17;
  char PUTSTATIC_opcode = (char)18;
  char GETFIELD_opcode = (char)19;
  char PUTFIELD_opcode = (char)20;
  char INT_ZERO_CHECK_opcode = (char)21;
  char LONG_ZERO_CHECK_opcode = (char)22;
  char BOUNDS_CHECK_opcode = (char)23;
  char OBJARRAY_STORE_CHECK_opcode = (char)24;
  char OBJARRAY_STORE_CHECK_NOTNULL_opcode = (char)25;
  char IG_PATCH_POINT_opcode = (char)26;
  char IG_CLASS_TEST_opcode = (char)27;
  char IG_METHOD_TEST_opcode = (char)28;
  char TABLESWITCH_opcode = (char)29;
  char LOOKUPSWITCH_opcode = (char)30;
  char INT_ALOAD_opcode = (char)31;
  char LONG_ALOAD_opcode = (char)32;
  char FLOAT_ALOAD_opcode = (char)33;
  char DOUBLE_ALOAD_opcode = (char)34;
  char REF_ALOAD_opcode = (char)35;
  char UBYTE_ALOAD_opcode = (char)36;
  char BYTE_ALOAD_opcode = (char)37;
  char USHORT_ALOAD_opcode = (char)38;
  char SHORT_ALOAD_opcode = (char)39;
  char INT_ASTORE_opcode = (char)40;
  char LONG_ASTORE_opcode = (char)41;
  char FLOAT_ASTORE_opcode = (char)42;
  char DOUBLE_ASTORE_opcode = (char)43;
  char REF_ASTORE_opcode = (char)44;
  char BYTE_ASTORE_opcode = (char)45;
  char SHORT_ASTORE_opcode = (char)46;
  char INT_IFCMP_opcode = (char)47;
  char INT_IFCMP2_opcode = (char)48;
  char LONG_IFCMP_opcode = (char)49;
  char FLOAT_IFCMP_opcode = (char)50;
  char DOUBLE_IFCMP_opcode = (char)51;
  char REF_IFCMP_opcode = (char)52;
  char LABEL_opcode = (char)53;
  char BBEND_opcode = (char)54;
  char UNINT_BEGIN_opcode = (char)55;
  char UNINT_END_opcode = (char)56;
  char FENCE_opcode = (char)57;
  char READ_CEILING_opcode = (char)58;
  char WRITE_FLOOR_opcode = (char)59;
  char PHI_opcode = (char)60;
  char SPLIT_opcode = (char)61;
  char PI_opcode = (char)62;
  char NOP_opcode = (char)63;
  char INT_MOVE_opcode = (char)64;
  char LONG_MOVE_opcode = (char)65;
  char FLOAT_MOVE_opcode = (char)66;
  char DOUBLE_MOVE_opcode = (char)67;
  char REF_MOVE_opcode = (char)68;
  char GUARD_MOVE_opcode = (char)69;
  char INT_COND_MOVE_opcode = (char)70;
  char LONG_COND_MOVE_opcode = (char)71;
  char FLOAT_COND_MOVE_opcode = (char)72;
  char DOUBLE_COND_MOVE_opcode = (char)73;
  char REF_COND_MOVE_opcode = (char)74;
  char GUARD_COND_MOVE_opcode = (char)75;
  char GUARD_COMBINE_opcode = (char)76;
  char REF_ADD_opcode = (char)77;
  char INT_ADD_opcode = (char)78;
  char LONG_ADD_opcode = (char)79;
  char FLOAT_ADD_opcode = (char)80;
  char DOUBLE_ADD_opcode = (char)81;
  char REF_SUB_opcode = (char)82;
  char INT_SUB_opcode = (char)83;
  char LONG_SUB_opcode = (char)84;
  char FLOAT_SUB_opcode = (char)85;
  char DOUBLE_SUB_opcode = (char)86;
  char INT_MUL_opcode = (char)87;
  char LONG_MUL_opcode = (char)88;
  char FLOAT_MUL_opcode = (char)89;
  char DOUBLE_MUL_opcode = (char)90;
  char INT_DIV_opcode = (char)91;
  char LONG_DIV_opcode = (char)92;
  char FLOAT_DIV_opcode = (char)93;
  char DOUBLE_DIV_opcode = (char)94;
  char INT_REM_opcode = (char)95;
  char LONG_REM_opcode = (char)96;
  char FLOAT_REM_opcode = (char)97;
  char DOUBLE_REM_opcode = (char)98;
  char REF_NEG_opcode = (char)99;
  char INT_NEG_opcode = (char)100;
  char LONG_NEG_opcode = (char)101;
  char FLOAT_NEG_opcode = (char)102;
  char DOUBLE_NEG_opcode = (char)103;
  char FLOAT_SQRT_opcode = (char)104;
  char DOUBLE_SQRT_opcode = (char)105;
  char REF_SHL_opcode = (char)106;
  char INT_SHL_opcode = (char)107;
  char LONG_SHL_opcode = (char)108;
  char REF_SHR_opcode = (char)109;
  char INT_SHR_opcode = (char)110;
  char LONG_SHR_opcode = (char)111;
  char REF_USHR_opcode = (char)112;
  char INT_USHR_opcode = (char)113;
  char LONG_USHR_opcode = (char)114;
  char REF_AND_opcode = (char)115;
  char INT_AND_opcode = (char)116;
  char LONG_AND_opcode = (char)117;
  char REF_OR_opcode = (char)118;
  char INT_OR_opcode = (char)119;
  char LONG_OR_opcode = (char)120;
  char REF_XOR_opcode = (char)121;
  char INT_XOR_opcode = (char)122;
  char REF_NOT_opcode = (char)123;
  char INT_NOT_opcode = (char)124;
  char LONG_NOT_opcode = (char)125;
  char LONG_XOR_opcode = (char)126;
  char INT_2ADDRSigExt_opcode = (char)127;
  char INT_2ADDRZerExt_opcode = (char)128;
  char LONG_2ADDR_opcode = (char)129;
  char ADDR_2INT_opcode = (char)130;
  char ADDR_2LONG_opcode = (char)131;
  char INT_2LONG_opcode = (char)132;
  char INT_2FLOAT_opcode = (char)133;
  char INT_2DOUBLE_opcode = (char)134;
  char LONG_2INT_opcode = (char)135;
  char LONG_2FLOAT_opcode = (char)136;
  char LONG_2DOUBLE_opcode = (char)137;
  char FLOAT_2INT_opcode = (char)138;
  char FLOAT_2LONG_opcode = (char)139;
  char FLOAT_2DOUBLE_opcode = (char)140;
  char DOUBLE_2INT_opcode = (char)141;
  char DOUBLE_2LONG_opcode = (char)142;
  char DOUBLE_2FLOAT_opcode = (char)143;
  char INT_2BYTE_opcode = (char)144;
  char INT_2USHORT_opcode = (char)145;
  char INT_2SHORT_opcode = (char)146;
  char LONG_CMP_opcode = (char)147;
  char FLOAT_CMPL_opcode = (char)148;
  char FLOAT_CMPG_opcode = (char)149;
  char DOUBLE_CMPL_opcode = (char)150;
  char DOUBLE_CMPG_opcode = (char)151;
  char RETURN_opcode = (char)152;
  char NULL_CHECK_opcode = (char)153;
  char GOTO_opcode = (char)154;
  char BOOLEAN_NOT_opcode = (char)155;
  char BOOLEAN_CMP_INT_opcode = (char)156;
  char BOOLEAN_CMP_ADDR_opcode = (char)157;
  char BOOLEAN_CMP_LONG_opcode = (char)158;
  char BOOLEAN_CMP_FLOAT_opcode = (char)159;
  char BOOLEAN_CMP_DOUBLE_opcode = (char)160;
  char BYTE_LOAD_opcode = (char)161;
  char UBYTE_LOAD_opcode = (char)162;
  char SHORT_LOAD_opcode = (char)163;
  char USHORT_LOAD_opcode = (char)164;
  char REF_LOAD_opcode = (char)165;
  char REF_STORE_opcode = (char)166;
  char INT_LOAD_opcode = (char)167;
  char LONG_LOAD_opcode = (char)168;
  char FLOAT_LOAD_opcode = (char)169;
  char DOUBLE_LOAD_opcode = (char)170;
  char BYTE_STORE_opcode = (char)171;
  char SHORT_STORE_opcode = (char)172;
  char INT_STORE_opcode = (char)173;
  char LONG_STORE_opcode = (char)174;
  char FLOAT_STORE_opcode = (char)175;
  char DOUBLE_STORE_opcode = (char)176;
  char PREPARE_INT_opcode = (char)177;
  char PREPARE_ADDR_opcode = (char)178;
  char PREPARE_LONG_opcode = (char)179;
  char ATTEMPT_INT_opcode = (char)180;
  char ATTEMPT_ADDR_opcode = (char)181;
  char ATTEMPT_LONG_opcode = (char)182;
  char CALL_opcode = (char)183;
  char SYSCALL_opcode = (char)184;
  char YIELDPOINT_PROLOGUE_opcode = (char)185;
  char YIELDPOINT_EPILOGUE_opcode = (char)186;
  char YIELDPOINT_BACKEDGE_opcode = (char)187;
  char YIELDPOINT_OSR_opcode = (char)188;
  char OSR_BARRIER_opcode = (char)189;
  char IR_PROLOGUE_opcode = (char)190;
  char RESOLVE_opcode = (char)191;
  char RESOLVE_MEMBER_opcode = (char)192;
  char GET_TIME_BASE_opcode = (char)193;
  char INSTRUMENTED_EVENT_COUNTER_opcode = (char)194;
  char TRAP_IF_opcode = (char)195;
  char TRAP_opcode = (char)196;
  char FLOAT_AS_INT_BITS_opcode = (char)197;
  char INT_BITS_AS_FLOAT_opcode = (char)198;
  char DOUBLE_AS_LONG_BITS_opcode = (char)199;
  char LONG_BITS_AS_DOUBLE_opcode = (char)200;
  char ARRAYLENGTH_opcode = (char)201;
  char GET_OBJ_TIB_opcode = (char)202;
  char GET_CLASS_TIB_opcode = (char)203;
  char GET_TYPE_FROM_TIB_opcode = (char)204;
  char GET_SUPERCLASS_IDS_FROM_TIB_opcode = (char)205;
  char GET_DOES_IMPLEMENT_FROM_TIB_opcode = (char)206;
  char GET_ARRAY_ELEMENT_TIB_FROM_TIB_opcode = (char)207;
  char LOWTABLESWITCH_opcode = (char)208;
  char ARCH_INDEPENDENT_END_opcode = (char)209;
  //////////////////////////
  // END   Architecture Independent opcodes.
  // BEGIN Architecture Dependent opcodes & MIR.
  //////////////////////////
  char ADDRESS_CONSTANT_opcode = (char)(0 + ARCH_INDEPENDENT_END_opcode);
  char INT_CONSTANT_opcode = (char)(1 + ARCH_INDEPENDENT_END_opcode);
  char LONG_CONSTANT_opcode = (char)(2 + ARCH_INDEPENDENT_END_opcode);
  char REGISTER_opcode = (char)(3 + ARCH_INDEPENDENT_END_opcode);
  char OTHER_OPERAND_opcode = (char)(4 + ARCH_INDEPENDENT_END_opcode);
  char NULL_opcode = (char)(5 + ARCH_INDEPENDENT_END_opcode);
  char BRANCH_TARGET_opcode = (char)(6 + ARCH_INDEPENDENT_END_opcode);
  char DCBF_opcode = (char)(7 + ARCH_INDEPENDENT_END_opcode);
  char DCBST_opcode = (char)(8 + ARCH_INDEPENDENT_END_opcode);
  char DCBT_opcode = (char)(9 + ARCH_INDEPENDENT_END_opcode);
  char DCBTST_opcode = (char)(10 + ARCH_INDEPENDENT_END_opcode);
  char DCBZ_opcode = (char)(11 + ARCH_INDEPENDENT_END_opcode);
  char DCBZL_opcode = (char)(12 + ARCH_INDEPENDENT_END_opcode);
  char ICBI_opcode = (char)(13 + ARCH_INDEPENDENT_END_opcode);
  char CALL_SAVE_VOLATILE_opcode = (char)(14 + ARCH_INDEPENDENT_END_opcode);
  char MIR_START_opcode = (char)(15 + ARCH_INDEPENDENT_END_opcode);
  char MIR_LOWTABLESWITCH_opcode = (char)(16 + ARCH_INDEPENDENT_END_opcode);
  char PPC_DATA_INT_opcode = (char)(17 + ARCH_INDEPENDENT_END_opcode);
  char PPC_DATA_LABEL_opcode = (char)(18 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ADD_opcode = (char)(19 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ADDr_opcode = (char)(20 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ADDC_opcode = (char)(21 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ADDE_opcode = (char)(22 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ADDZE_opcode = (char)(23 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ADDME_opcode = (char)(24 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ADDIC_opcode = (char)(25 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ADDICr_opcode = (char)(26 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SUBF_opcode = (char)(27 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SUBFr_opcode = (char)(28 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SUBFC_opcode = (char)(29 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SUBFCr_opcode = (char)(30 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SUBFIC_opcode = (char)(31 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SUBFE_opcode = (char)(32 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SUBFZE_opcode = (char)(33 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SUBFME_opcode = (char)(34 + ARCH_INDEPENDENT_END_opcode);
  char PPC_AND_opcode = (char)(35 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ANDr_opcode = (char)(36 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ANDIr_opcode = (char)(37 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ANDISr_opcode = (char)(38 + ARCH_INDEPENDENT_END_opcode);
  char PPC_NAND_opcode = (char)(39 + ARCH_INDEPENDENT_END_opcode);
  char PPC_NANDr_opcode = (char)(40 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ANDC_opcode = (char)(41 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ANDCr_opcode = (char)(42 + ARCH_INDEPENDENT_END_opcode);
  char PPC_OR_opcode = (char)(43 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ORr_opcode = (char)(44 + ARCH_INDEPENDENT_END_opcode);
  char PPC_MOVE_opcode = (char)(45 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ORI_opcode = (char)(46 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ORIS_opcode = (char)(47 + ARCH_INDEPENDENT_END_opcode);
  char PPC_NOR_opcode = (char)(48 + ARCH_INDEPENDENT_END_opcode);
  char PPC_NORr_opcode = (char)(49 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ORC_opcode = (char)(50 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ORCr_opcode = (char)(51 + ARCH_INDEPENDENT_END_opcode);
  char PPC_XOR_opcode = (char)(52 + ARCH_INDEPENDENT_END_opcode);
  char PPC_XORr_opcode = (char)(53 + ARCH_INDEPENDENT_END_opcode);
  char PPC_XORI_opcode = (char)(54 + ARCH_INDEPENDENT_END_opcode);
  char PPC_XORIS_opcode = (char)(55 + ARCH_INDEPENDENT_END_opcode);
  char PPC_EQV_opcode = (char)(56 + ARCH_INDEPENDENT_END_opcode);
  char PPC_EQVr_opcode = (char)(57 + ARCH_INDEPENDENT_END_opcode);
  char PPC_NEG_opcode = (char)(58 + ARCH_INDEPENDENT_END_opcode);
  char PPC_NEGr_opcode = (char)(59 + ARCH_INDEPENDENT_END_opcode);
  char PPC_CNTLZW_opcode = (char)(60 + ARCH_INDEPENDENT_END_opcode);
  char PPC_EXTSB_opcode = (char)(61 + ARCH_INDEPENDENT_END_opcode);
  char PPC_EXTSBr_opcode = (char)(62 + ARCH_INDEPENDENT_END_opcode);
  char PPC_EXTSH_opcode = (char)(63 + ARCH_INDEPENDENT_END_opcode);
  char PPC_EXTSHr_opcode = (char)(64 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SLW_opcode = (char)(65 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SLWr_opcode = (char)(66 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SLWI_opcode = (char)(67 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SLWIr_opcode = (char)(68 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SRW_opcode = (char)(69 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SRWr_opcode = (char)(70 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SRWI_opcode = (char)(71 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SRWIr_opcode = (char)(72 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SRAW_opcode = (char)(73 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SRAWr_opcode = (char)(74 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SRAWI_opcode = (char)(75 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SRAWIr_opcode = (char)(76 + ARCH_INDEPENDENT_END_opcode);
  char PPC_RLWINM_opcode = (char)(77 + ARCH_INDEPENDENT_END_opcode);
  char PPC_RLWINMr_opcode = (char)(78 + ARCH_INDEPENDENT_END_opcode);
  char PPC_RLWIMI_opcode = (char)(79 + ARCH_INDEPENDENT_END_opcode);
  char PPC_RLWIMIr_opcode = (char)(80 + ARCH_INDEPENDENT_END_opcode);
  char PPC_RLWNM_opcode = (char)(81 + ARCH_INDEPENDENT_END_opcode);
  char PPC_RLWNMr_opcode = (char)(82 + ARCH_INDEPENDENT_END_opcode);
  char PPC_B_opcode = (char)(83 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BL_opcode = (char)(84 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BL_SYS_opcode = (char)(85 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BLR_opcode = (char)(86 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BCTR_opcode = (char)(87 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BCTRL_opcode = (char)(88 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BCTRL_SYS_opcode = (char)(89 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BCLR_opcode = (char)(90 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BLRL_opcode = (char)(91 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BCLRL_opcode = (char)(92 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BC_opcode = (char)(93 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BCL_opcode = (char)(94 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BCOND_opcode = (char)(95 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BCOND2_opcode = (char)(96 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BCCTR_opcode = (char)(97 + ARCH_INDEPENDENT_END_opcode);
  char PPC_BCC_opcode = (char)(98 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ADDI_opcode = (char)(99 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ADDIS_opcode = (char)(100 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LDI_opcode = (char)(101 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LDIS_opcode = (char)(102 + ARCH_INDEPENDENT_END_opcode);
  char PPC_CMP_opcode = (char)(103 + ARCH_INDEPENDENT_END_opcode);
  char PPC_CMPI_opcode = (char)(104 + ARCH_INDEPENDENT_END_opcode);
  char PPC_CMPL_opcode = (char)(105 + ARCH_INDEPENDENT_END_opcode);
  char PPC_CMPLI_opcode = (char)(106 + ARCH_INDEPENDENT_END_opcode);
  char PPC_CRAND_opcode = (char)(107 + ARCH_INDEPENDENT_END_opcode);
  char PPC_CRANDC_opcode = (char)(108 + ARCH_INDEPENDENT_END_opcode);
  char PPC_CROR_opcode = (char)(109 + ARCH_INDEPENDENT_END_opcode);
  char PPC_CRORC_opcode = (char)(110 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FMR_opcode = (char)(111 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FRSP_opcode = (char)(112 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FCTIW_opcode = (char)(113 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FCTIWZ_opcode = (char)(114 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FADD_opcode = (char)(115 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FADDS_opcode = (char)(116 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FSQRT_opcode = (char)(117 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FSQRTS_opcode = (char)(118 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FABS_opcode = (char)(119 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FCMPO_opcode = (char)(120 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FCMPU_opcode = (char)(121 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FDIV_opcode = (char)(122 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FDIVS_opcode = (char)(123 + ARCH_INDEPENDENT_END_opcode);
  char PPC_DIVW_opcode = (char)(124 + ARCH_INDEPENDENT_END_opcode);
  char PPC_DIVWU_opcode = (char)(125 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FMUL_opcode = (char)(126 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FMULS_opcode = (char)(127 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FSEL_opcode = (char)(128 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FMADD_opcode = (char)(129 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FMADDS_opcode = (char)(130 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FMSUB_opcode = (char)(131 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FMSUBS_opcode = (char)(132 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FNMADD_opcode = (char)(133 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FNMADDS_opcode = (char)(134 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FNMSUB_opcode = (char)(135 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FNMSUBS_opcode = (char)(136 + ARCH_INDEPENDENT_END_opcode);
  char PPC_MULLI_opcode = (char)(137 + ARCH_INDEPENDENT_END_opcode);
  char PPC_MULLW_opcode = (char)(138 + ARCH_INDEPENDENT_END_opcode);
  char PPC_MULHW_opcode = (char)(139 + ARCH_INDEPENDENT_END_opcode);
  char PPC_MULHWU_opcode = (char)(140 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FNEG_opcode = (char)(141 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FSUB_opcode = (char)(142 + ARCH_INDEPENDENT_END_opcode);
  char PPC_FSUBS_opcode = (char)(143 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LWZ_opcode = (char)(144 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LWZU_opcode = (char)(145 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LWZUX_opcode = (char)(146 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LWZX_opcode = (char)(147 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LWARX_opcode = (char)(148 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LBZ_opcode = (char)(149 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LBZUX_opcode = (char)(150 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LBZX_opcode = (char)(151 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LHA_opcode = (char)(152 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LHAX_opcode = (char)(153 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LHZ_opcode = (char)(154 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LHZX_opcode = (char)(155 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LFD_opcode = (char)(156 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LFDX_opcode = (char)(157 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LFS_opcode = (char)(158 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LFSX_opcode = (char)(159 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LMW_opcode = (char)(160 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STW_opcode = (char)(161 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STWX_opcode = (char)(162 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STWCXr_opcode = (char)(163 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STWU_opcode = (char)(164 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STB_opcode = (char)(165 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STBX_opcode = (char)(166 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STH_opcode = (char)(167 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STHX_opcode = (char)(168 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STFD_opcode = (char)(169 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STFDX_opcode = (char)(170 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STFDU_opcode = (char)(171 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STFS_opcode = (char)(172 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STFSX_opcode = (char)(173 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STFSU_opcode = (char)(174 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STMW_opcode = (char)(175 + ARCH_INDEPENDENT_END_opcode);
  char PPC_TW_opcode = (char)(176 + ARCH_INDEPENDENT_END_opcode);
  char PPC_TWI_opcode = (char)(177 + ARCH_INDEPENDENT_END_opcode);
  char PPC_MFSPR_opcode = (char)(178 + ARCH_INDEPENDENT_END_opcode);
  char PPC_MTSPR_opcode = (char)(179 + ARCH_INDEPENDENT_END_opcode);
  char PPC_MFTB_opcode = (char)(180 + ARCH_INDEPENDENT_END_opcode);
  char PPC_MFTBU_opcode = (char)(181 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SYNC_opcode = (char)(182 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ISYNC_opcode = (char)(183 + ARCH_INDEPENDENT_END_opcode);
  char PPC_DCBF_opcode = (char)(184 + ARCH_INDEPENDENT_END_opcode);
  char PPC_DCBST_opcode = (char)(185 + ARCH_INDEPENDENT_END_opcode);
  char PPC_DCBT_opcode = (char)(186 + ARCH_INDEPENDENT_END_opcode);
  char PPC_DCBTST_opcode = (char)(187 + ARCH_INDEPENDENT_END_opcode);
  char PPC_DCBZ_opcode = (char)(188 + ARCH_INDEPENDENT_END_opcode);
  char PPC_DCBZL_opcode = (char)(189 + ARCH_INDEPENDENT_END_opcode);
  char PPC_ICBI_opcode = (char)(190 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_EXTSW_opcode = (char)(191 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_EXTSWr_opcode = (char)(192 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_EXTZW_opcode = (char)(193 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_RLDICL_opcode = (char)(194 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_RLDICR_opcode = (char)(195 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_SLD_opcode = (char)(196 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_SLDr_opcode = (char)(197 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_SLDI_opcode = (char)(198 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_SRD_opcode = (char)(199 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_SRDr_opcode = (char)(200 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_SRAD_opcode = (char)(201 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_SRADr_opcode = (char)(202 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_SRADI_opcode = (char)(203 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_SRADIr_opcode = (char)(204 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_SRDI_opcode = (char)(205 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_RLDIMI_opcode = (char)(206 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_RLDIMIr_opcode = (char)(207 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_CMP_opcode = (char)(208 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_CMPI_opcode = (char)(209 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_CMPL_opcode = (char)(210 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_CMPLI_opcode = (char)(211 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_FCFID_opcode = (char)(212 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_FCTIDZ_opcode = (char)(213 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_DIVD_opcode = (char)(214 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_MULLD_opcode = (char)(215 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_LD_opcode = (char)(216 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_LDX_opcode = (char)(217 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_STD_opcode = (char)(218 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_STDX_opcode = (char)(219 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_TD_opcode = (char)(220 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_TDI_opcode = (char)(221 + ARCH_INDEPENDENT_END_opcode);
  char PPC_CNTLZAddr_opcode = (char)(222 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SRAAddrI_opcode = (char)(223 + ARCH_INDEPENDENT_END_opcode);
  char PPC_SRAddrI_opcode = (char)(224 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_LWA_opcode = (char)(225 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LInt_opcode = (char)(226 + ARCH_INDEPENDENT_END_opcode);
  char PPC64_LWAX_opcode = (char)(227 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LIntX_opcode = (char)(228 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LIntUX_opcode = (char)(229 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LAddr_opcode = (char)(230 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LAddrX_opcode = (char)(231 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LAddrU_opcode = (char)(232 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LAddrUX_opcode = (char)(233 + ARCH_INDEPENDENT_END_opcode);
  char PPC_LAddrARX_opcode = (char)(234 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STAddr_opcode = (char)(235 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STAddrX_opcode = (char)(236 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STAddrU_opcode = (char)(237 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STAddrUX_opcode = (char)(238 + ARCH_INDEPENDENT_END_opcode);
  char PPC_STAddrCXr_opcode = (char)(239 + ARCH_INDEPENDENT_END_opcode);
  char PPC_TAddr_opcode = (char)(240 + ARCH_INDEPENDENT_END_opcode);
  char MIR_END_opcode = (char)(241 + ARCH_INDEPENDENT_END_opcode);


  Operator GET_CAUGHT_EXCEPTION = Operator.OperatorArray[0];
  Operator SET_CAUGHT_EXCEPTION = Operator.OperatorArray[1];
  Operator NEW = Operator.OperatorArray[2];
  Operator NEW_UNRESOLVED = Operator.OperatorArray[3];
  Operator NEWARRAY = Operator.OperatorArray[4];
  Operator NEWARRAY_UNRESOLVED = Operator.OperatorArray[5];
  Operator ATHROW = Operator.OperatorArray[6];
  Operator CHECKCAST = Operator.OperatorArray[7];
  Operator CHECKCAST_NOTNULL = Operator.OperatorArray[8];
  Operator CHECKCAST_UNRESOLVED = Operator.OperatorArray[9];
  Operator MUST_IMPLEMENT_INTERFACE = Operator.OperatorArray[10];
  Operator INSTANCEOF = Operator.OperatorArray[11];
  Operator INSTANCEOF_NOTNULL = Operator.OperatorArray[12];
  Operator INSTANCEOF_UNRESOLVED = Operator.OperatorArray[13];
  Operator MONITORENTER = Operator.OperatorArray[14];
  Operator MONITOREXIT = Operator.OperatorArray[15];
  Operator NEWOBJMULTIARRAY = Operator.OperatorArray[16];
  Operator GETSTATIC = Operator.OperatorArray[17];
  Operator PUTSTATIC = Operator.OperatorArray[18];
  Operator GETFIELD = Operator.OperatorArray[19];
  Operator PUTFIELD = Operator.OperatorArray[20];
  Operator INT_ZERO_CHECK = Operator.OperatorArray[21];
  Operator LONG_ZERO_CHECK = Operator.OperatorArray[22];
  Operator BOUNDS_CHECK = Operator.OperatorArray[23];
  Operator OBJARRAY_STORE_CHECK = Operator.OperatorArray[24];
  Operator OBJARRAY_STORE_CHECK_NOTNULL = Operator.OperatorArray[25];
  Operator IG_PATCH_POINT = Operator.OperatorArray[26];
  Operator IG_CLASS_TEST = Operator.OperatorArray[27];
  Operator IG_METHOD_TEST = Operator.OperatorArray[28];
  Operator TABLESWITCH = Operator.OperatorArray[29];
  Operator LOOKUPSWITCH = Operator.OperatorArray[30];
  Operator INT_ALOAD = Operator.OperatorArray[31];
  Operator LONG_ALOAD = Operator.OperatorArray[32];
  Operator FLOAT_ALOAD = Operator.OperatorArray[33];
  Operator DOUBLE_ALOAD = Operator.OperatorArray[34];
  Operator REF_ALOAD = Operator.OperatorArray[35];
  Operator UBYTE_ALOAD = Operator.OperatorArray[36];
  Operator BYTE_ALOAD = Operator.OperatorArray[37];
  Operator USHORT_ALOAD = Operator.OperatorArray[38];
  Operator SHORT_ALOAD = Operator.OperatorArray[39];
  Operator INT_ASTORE = Operator.OperatorArray[40];
  Operator LONG_ASTORE = Operator.OperatorArray[41];
  Operator FLOAT_ASTORE = Operator.OperatorArray[42];
  Operator DOUBLE_ASTORE = Operator.OperatorArray[43];
  Operator REF_ASTORE = Operator.OperatorArray[44];
  Operator BYTE_ASTORE = Operator.OperatorArray[45];
  Operator SHORT_ASTORE = Operator.OperatorArray[46];
  Operator INT_IFCMP = Operator.OperatorArray[47];
  Operator INT_IFCMP2 = Operator.OperatorArray[48];
  Operator LONG_IFCMP = Operator.OperatorArray[49];
  Operator FLOAT_IFCMP = Operator.OperatorArray[50];
  Operator DOUBLE_IFCMP = Operator.OperatorArray[51];
  Operator REF_IFCMP = Operator.OperatorArray[52];
  Operator LABEL = Operator.OperatorArray[53];
  Operator BBEND = Operator.OperatorArray[54];
  Operator UNINT_BEGIN = Operator.OperatorArray[55];
  Operator UNINT_END = Operator.OperatorArray[56];
  Operator FENCE = Operator.OperatorArray[57];
  Operator READ_CEILING = Operator.OperatorArray[58];
  Operator WRITE_FLOOR = Operator.OperatorArray[59];
  Operator PHI = Operator.OperatorArray[60];
  Operator SPLIT = Operator.OperatorArray[61];
  Operator PI = Operator.OperatorArray[62];
  Operator NOP = Operator.OperatorArray[63];
  Operator INT_MOVE = Operator.OperatorArray[64];
  Operator LONG_MOVE = Operator.OperatorArray[65];
  Operator FLOAT_MOVE = Operator.OperatorArray[66];
  Operator DOUBLE_MOVE = Operator.OperatorArray[67];
  Operator REF_MOVE = Operator.OperatorArray[68];
  Operator GUARD_MOVE = Operator.OperatorArray[69];
  Operator INT_COND_MOVE = Operator.OperatorArray[70];
  Operator LONG_COND_MOVE = Operator.OperatorArray[71];
  Operator FLOAT_COND_MOVE = Operator.OperatorArray[72];
  Operator DOUBLE_COND_MOVE = Operator.OperatorArray[73];
  Operator REF_COND_MOVE = Operator.OperatorArray[74];
  Operator GUARD_COND_MOVE = Operator.OperatorArray[75];
  Operator GUARD_COMBINE = Operator.OperatorArray[76];
  Operator REF_ADD = Operator.OperatorArray[77];
  Operator INT_ADD = Operator.OperatorArray[78];
  Operator LONG_ADD = Operator.OperatorArray[79];
  Operator FLOAT_ADD = Operator.OperatorArray[80];
  Operator DOUBLE_ADD = Operator.OperatorArray[81];
  Operator REF_SUB = Operator.OperatorArray[82];
  Operator INT_SUB = Operator.OperatorArray[83];
  Operator LONG_SUB = Operator.OperatorArray[84];
  Operator FLOAT_SUB = Operator.OperatorArray[85];
  Operator DOUBLE_SUB = Operator.OperatorArray[86];
  Operator INT_MUL = Operator.OperatorArray[87];
  Operator LONG_MUL = Operator.OperatorArray[88];
  Operator FLOAT_MUL = Operator.OperatorArray[89];
  Operator DOUBLE_MUL = Operator.OperatorArray[90];
  Operator INT_DIV = Operator.OperatorArray[91];
  Operator LONG_DIV = Operator.OperatorArray[92];
  Operator FLOAT_DIV = Operator.OperatorArray[93];
  Operator DOUBLE_DIV = Operator.OperatorArray[94];
  Operator INT_REM = Operator.OperatorArray[95];
  Operator LONG_REM = Operator.OperatorArray[96];
  Operator FLOAT_REM = Operator.OperatorArray[97];
  Operator DOUBLE_REM = Operator.OperatorArray[98];
  Operator REF_NEG = Operator.OperatorArray[99];
  Operator INT_NEG = Operator.OperatorArray[100];
  Operator LONG_NEG = Operator.OperatorArray[101];
  Operator FLOAT_NEG = Operator.OperatorArray[102];
  Operator DOUBLE_NEG = Operator.OperatorArray[103];
  Operator FLOAT_SQRT = Operator.OperatorArray[104];
  Operator DOUBLE_SQRT = Operator.OperatorArray[105];
  Operator REF_SHL = Operator.OperatorArray[106];
  Operator INT_SHL = Operator.OperatorArray[107];
  Operator LONG_SHL = Operator.OperatorArray[108];
  Operator REF_SHR = Operator.OperatorArray[109];
  Operator INT_SHR = Operator.OperatorArray[110];
  Operator LONG_SHR = Operator.OperatorArray[111];
  Operator REF_USHR = Operator.OperatorArray[112];
  Operator INT_USHR = Operator.OperatorArray[113];
  Operator LONG_USHR = Operator.OperatorArray[114];
  Operator REF_AND = Operator.OperatorArray[115];
  Operator INT_AND = Operator.OperatorArray[116];
  Operator LONG_AND = Operator.OperatorArray[117];
  Operator REF_OR = Operator.OperatorArray[118];
  Operator INT_OR = Operator.OperatorArray[119];
  Operator LONG_OR = Operator.OperatorArray[120];
  Operator REF_XOR = Operator.OperatorArray[121];
  Operator INT_XOR = Operator.OperatorArray[122];
  Operator REF_NOT = Operator.OperatorArray[123];
  Operator INT_NOT = Operator.OperatorArray[124];
  Operator LONG_NOT = Operator.OperatorArray[125];
  Operator LONG_XOR = Operator.OperatorArray[126];
  Operator INT_2ADDRSigExt = Operator.OperatorArray[127];
  Operator INT_2ADDRZerExt = Operator.OperatorArray[128];
  Operator LONG_2ADDR = Operator.OperatorArray[129];
  Operator ADDR_2INT = Operator.OperatorArray[130];
  Operator ADDR_2LONG = Operator.OperatorArray[131];
  Operator INT_2LONG = Operator.OperatorArray[132];
  Operator INT_2FLOAT = Operator.OperatorArray[133];
  Operator INT_2DOUBLE = Operator.OperatorArray[134];
  Operator LONG_2INT = Operator.OperatorArray[135];
  Operator LONG_2FLOAT = Operator.OperatorArray[136];
  Operator LONG_2DOUBLE = Operator.OperatorArray[137];
  Operator FLOAT_2INT = Operator.OperatorArray[138];
  Operator FLOAT_2LONG = Operator.OperatorArray[139];
  Operator FLOAT_2DOUBLE = Operator.OperatorArray[140];
  Operator DOUBLE_2INT = Operator.OperatorArray[141];
  Operator DOUBLE_2LONG = Operator.OperatorArray[142];
  Operator DOUBLE_2FLOAT = Operator.OperatorArray[143];
  Operator INT_2BYTE = Operator.OperatorArray[144];
  Operator INT_2USHORT = Operator.OperatorArray[145];
  Operator INT_2SHORT = Operator.OperatorArray[146];
  Operator LONG_CMP = Operator.OperatorArray[147];
  Operator FLOAT_CMPL = Operator.OperatorArray[148];
  Operator FLOAT_CMPG = Operator.OperatorArray[149];
  Operator DOUBLE_CMPL = Operator.OperatorArray[150];
  Operator DOUBLE_CMPG = Operator.OperatorArray[151];
  Operator RETURN = Operator.OperatorArray[152];
  Operator NULL_CHECK = Operator.OperatorArray[153];
  Operator GOTO = Operator.OperatorArray[154];
  Operator BOOLEAN_NOT = Operator.OperatorArray[155];
  Operator BOOLEAN_CMP_INT = Operator.OperatorArray[156];
  Operator BOOLEAN_CMP_ADDR = Operator.OperatorArray[157];
  Operator BOOLEAN_CMP_LONG = Operator.OperatorArray[158];
  Operator BOOLEAN_CMP_FLOAT = Operator.OperatorArray[159];
  Operator BOOLEAN_CMP_DOUBLE = Operator.OperatorArray[160];
  Operator BYTE_LOAD = Operator.OperatorArray[161];
  Operator UBYTE_LOAD = Operator.OperatorArray[162];
  Operator SHORT_LOAD = Operator.OperatorArray[163];
  Operator USHORT_LOAD = Operator.OperatorArray[164];
  Operator REF_LOAD = Operator.OperatorArray[165];
  Operator REF_STORE = Operator.OperatorArray[166];
  Operator INT_LOAD = Operator.OperatorArray[167];
  Operator LONG_LOAD = Operator.OperatorArray[168];
  Operator FLOAT_LOAD = Operator.OperatorArray[169];
  Operator DOUBLE_LOAD = Operator.OperatorArray[170];
  Operator BYTE_STORE = Operator.OperatorArray[171];
  Operator SHORT_STORE = Operator.OperatorArray[172];
  Operator INT_STORE = Operator.OperatorArray[173];
  Operator LONG_STORE = Operator.OperatorArray[174];
  Operator FLOAT_STORE = Operator.OperatorArray[175];
  Operator DOUBLE_STORE = Operator.OperatorArray[176];
  Operator PREPARE_INT = Operator.OperatorArray[177];
  Operator PREPARE_ADDR = Operator.OperatorArray[178];
  Operator PREPARE_LONG = Operator.OperatorArray[179];
  Operator ATTEMPT_INT = Operator.OperatorArray[180];
  Operator ATTEMPT_ADDR = Operator.OperatorArray[181];
  Operator ATTEMPT_LONG = Operator.OperatorArray[182];
  Operator CALL = Operator.OperatorArray[183];
  Operator SYSCALL = Operator.OperatorArray[184];
  Operator YIELDPOINT_PROLOGUE = Operator.OperatorArray[185];
  Operator YIELDPOINT_EPILOGUE = Operator.OperatorArray[186];
  Operator YIELDPOINT_BACKEDGE = Operator.OperatorArray[187];
  Operator YIELDPOINT_OSR = Operator.OperatorArray[188];
  Operator OSR_BARRIER = Operator.OperatorArray[189];
  Operator IR_PROLOGUE = Operator.OperatorArray[190];
  Operator RESOLVE = Operator.OperatorArray[191];
  Operator RESOLVE_MEMBER = Operator.OperatorArray[192];
  Operator GET_TIME_BASE = Operator.OperatorArray[193];
  Operator INSTRUMENTED_EVENT_COUNTER = Operator.OperatorArray[194];
  Operator TRAP_IF = Operator.OperatorArray[195];
  Operator TRAP = Operator.OperatorArray[196];
  Operator FLOAT_AS_INT_BITS = Operator.OperatorArray[197];
  Operator INT_BITS_AS_FLOAT = Operator.OperatorArray[198];
  Operator DOUBLE_AS_LONG_BITS = Operator.OperatorArray[199];
  Operator LONG_BITS_AS_DOUBLE = Operator.OperatorArray[200];
  Operator ARRAYLENGTH = Operator.OperatorArray[201];
  Operator GET_OBJ_TIB = Operator.OperatorArray[202];
  Operator GET_CLASS_TIB = Operator.OperatorArray[203];
  Operator GET_TYPE_FROM_TIB = Operator.OperatorArray[204];
  Operator GET_SUPERCLASS_IDS_FROM_TIB = Operator.OperatorArray[205];
  Operator GET_DOES_IMPLEMENT_FROM_TIB = Operator.OperatorArray[206];
  Operator GET_ARRAY_ELEMENT_TIB_FROM_TIB = Operator.OperatorArray[207];
  Operator LOWTABLESWITCH = Operator.OperatorArray[208];
  //////////////////////////
  // END   Architecture Independent opcodes.
  // BEGIN Architecture Dependent opcodes & MIR.
  //////////////////////////
  Operator ADDRESS_CONSTANT = Operator.OperatorArray[0+ARCH_INDEPENDENT_END_opcode];
  Operator INT_CONSTANT = Operator.OperatorArray[1+ARCH_INDEPENDENT_END_opcode];
  Operator LONG_CONSTANT = Operator.OperatorArray[2+ARCH_INDEPENDENT_END_opcode];
  Operator REGISTER = Operator.OperatorArray[3+ARCH_INDEPENDENT_END_opcode];
  Operator OTHER_OPERAND = Operator.OperatorArray[4+ARCH_INDEPENDENT_END_opcode];
  Operator NULL = Operator.OperatorArray[5+ARCH_INDEPENDENT_END_opcode];
  Operator BRANCH_TARGET = Operator.OperatorArray[6+ARCH_INDEPENDENT_END_opcode];
  Operator DCBF = Operator.OperatorArray[7+ARCH_INDEPENDENT_END_opcode];
  Operator DCBST = Operator.OperatorArray[8+ARCH_INDEPENDENT_END_opcode];
  Operator DCBT = Operator.OperatorArray[9+ARCH_INDEPENDENT_END_opcode];
  Operator DCBTST = Operator.OperatorArray[10+ARCH_INDEPENDENT_END_opcode];
  Operator DCBZ = Operator.OperatorArray[11+ARCH_INDEPENDENT_END_opcode];
  Operator DCBZL = Operator.OperatorArray[12+ARCH_INDEPENDENT_END_opcode];
  Operator ICBI = Operator.OperatorArray[13+ARCH_INDEPENDENT_END_opcode];
  Operator CALL_SAVE_VOLATILE = Operator.OperatorArray[14+ARCH_INDEPENDENT_END_opcode];
  Operator MIR_START = Operator.OperatorArray[15+ARCH_INDEPENDENT_END_opcode];
  Operator MIR_LOWTABLESWITCH = Operator.OperatorArray[16+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_DATA_INT = Operator.OperatorArray[17+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_DATA_LABEL = Operator.OperatorArray[18+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ADD = Operator.OperatorArray[19+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ADDr = Operator.OperatorArray[20+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ADDC = Operator.OperatorArray[21+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ADDE = Operator.OperatorArray[22+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ADDZE = Operator.OperatorArray[23+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ADDME = Operator.OperatorArray[24+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ADDIC = Operator.OperatorArray[25+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ADDICr = Operator.OperatorArray[26+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SUBF = Operator.OperatorArray[27+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SUBFr = Operator.OperatorArray[28+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SUBFC = Operator.OperatorArray[29+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SUBFCr = Operator.OperatorArray[30+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SUBFIC = Operator.OperatorArray[31+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SUBFE = Operator.OperatorArray[32+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SUBFZE = Operator.OperatorArray[33+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SUBFME = Operator.OperatorArray[34+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_AND = Operator.OperatorArray[35+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ANDr = Operator.OperatorArray[36+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ANDIr = Operator.OperatorArray[37+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ANDISr = Operator.OperatorArray[38+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_NAND = Operator.OperatorArray[39+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_NANDr = Operator.OperatorArray[40+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ANDC = Operator.OperatorArray[41+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ANDCr = Operator.OperatorArray[42+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_OR = Operator.OperatorArray[43+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ORr = Operator.OperatorArray[44+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_MOVE = Operator.OperatorArray[45+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ORI = Operator.OperatorArray[46+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ORIS = Operator.OperatorArray[47+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_NOR = Operator.OperatorArray[48+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_NORr = Operator.OperatorArray[49+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ORC = Operator.OperatorArray[50+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ORCr = Operator.OperatorArray[51+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_XOR = Operator.OperatorArray[52+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_XORr = Operator.OperatorArray[53+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_XORI = Operator.OperatorArray[54+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_XORIS = Operator.OperatorArray[55+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_EQV = Operator.OperatorArray[56+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_EQVr = Operator.OperatorArray[57+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_NEG = Operator.OperatorArray[58+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_NEGr = Operator.OperatorArray[59+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_CNTLZW = Operator.OperatorArray[60+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_EXTSB = Operator.OperatorArray[61+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_EXTSBr = Operator.OperatorArray[62+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_EXTSH = Operator.OperatorArray[63+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_EXTSHr = Operator.OperatorArray[64+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SLW = Operator.OperatorArray[65+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SLWr = Operator.OperatorArray[66+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SLWI = Operator.OperatorArray[67+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SLWIr = Operator.OperatorArray[68+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SRW = Operator.OperatorArray[69+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SRWr = Operator.OperatorArray[70+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SRWI = Operator.OperatorArray[71+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SRWIr = Operator.OperatorArray[72+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SRAW = Operator.OperatorArray[73+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SRAWr = Operator.OperatorArray[74+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SRAWI = Operator.OperatorArray[75+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SRAWIr = Operator.OperatorArray[76+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_RLWINM = Operator.OperatorArray[77+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_RLWINMr = Operator.OperatorArray[78+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_RLWIMI = Operator.OperatorArray[79+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_RLWIMIr = Operator.OperatorArray[80+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_RLWNM = Operator.OperatorArray[81+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_RLWNMr = Operator.OperatorArray[82+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_B = Operator.OperatorArray[83+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BL = Operator.OperatorArray[84+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BL_SYS = Operator.OperatorArray[85+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BLR = Operator.OperatorArray[86+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BCTR = Operator.OperatorArray[87+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BCTRL = Operator.OperatorArray[88+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BCTRL_SYS = Operator.OperatorArray[89+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BCLR = Operator.OperatorArray[90+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BLRL = Operator.OperatorArray[91+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BCLRL = Operator.OperatorArray[92+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BC = Operator.OperatorArray[93+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BCL = Operator.OperatorArray[94+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BCOND = Operator.OperatorArray[95+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BCOND2 = Operator.OperatorArray[96+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BCCTR = Operator.OperatorArray[97+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_BCC = Operator.OperatorArray[98+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ADDI = Operator.OperatorArray[99+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ADDIS = Operator.OperatorArray[100+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LDI = Operator.OperatorArray[101+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LDIS = Operator.OperatorArray[102+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_CMP = Operator.OperatorArray[103+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_CMPI = Operator.OperatorArray[104+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_CMPL = Operator.OperatorArray[105+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_CMPLI = Operator.OperatorArray[106+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_CRAND = Operator.OperatorArray[107+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_CRANDC = Operator.OperatorArray[108+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_CROR = Operator.OperatorArray[109+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_CRORC = Operator.OperatorArray[110+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FMR = Operator.OperatorArray[111+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FRSP = Operator.OperatorArray[112+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FCTIW = Operator.OperatorArray[113+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FCTIWZ = Operator.OperatorArray[114+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FADD = Operator.OperatorArray[115+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FADDS = Operator.OperatorArray[116+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FSQRT = Operator.OperatorArray[117+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FSQRTS = Operator.OperatorArray[118+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FABS = Operator.OperatorArray[119+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FCMPO = Operator.OperatorArray[120+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FCMPU = Operator.OperatorArray[121+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FDIV = Operator.OperatorArray[122+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FDIVS = Operator.OperatorArray[123+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_DIVW = Operator.OperatorArray[124+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_DIVWU = Operator.OperatorArray[125+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FMUL = Operator.OperatorArray[126+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FMULS = Operator.OperatorArray[127+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FSEL = Operator.OperatorArray[128+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FMADD = Operator.OperatorArray[129+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FMADDS = Operator.OperatorArray[130+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FMSUB = Operator.OperatorArray[131+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FMSUBS = Operator.OperatorArray[132+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FNMADD = Operator.OperatorArray[133+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FNMADDS = Operator.OperatorArray[134+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FNMSUB = Operator.OperatorArray[135+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FNMSUBS = Operator.OperatorArray[136+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_MULLI = Operator.OperatorArray[137+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_MULLW = Operator.OperatorArray[138+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_MULHW = Operator.OperatorArray[139+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_MULHWU = Operator.OperatorArray[140+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FNEG = Operator.OperatorArray[141+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FSUB = Operator.OperatorArray[142+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_FSUBS = Operator.OperatorArray[143+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LWZ = Operator.OperatorArray[144+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LWZU = Operator.OperatorArray[145+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LWZUX = Operator.OperatorArray[146+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LWZX = Operator.OperatorArray[147+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LWARX = Operator.OperatorArray[148+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LBZ = Operator.OperatorArray[149+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LBZUX = Operator.OperatorArray[150+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LBZX = Operator.OperatorArray[151+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LHA = Operator.OperatorArray[152+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LHAX = Operator.OperatorArray[153+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LHZ = Operator.OperatorArray[154+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LHZX = Operator.OperatorArray[155+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LFD = Operator.OperatorArray[156+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LFDX = Operator.OperatorArray[157+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LFS = Operator.OperatorArray[158+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LFSX = Operator.OperatorArray[159+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LMW = Operator.OperatorArray[160+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STW = Operator.OperatorArray[161+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STWX = Operator.OperatorArray[162+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STWCXr = Operator.OperatorArray[163+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STWU = Operator.OperatorArray[164+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STB = Operator.OperatorArray[165+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STBX = Operator.OperatorArray[166+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STH = Operator.OperatorArray[167+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STHX = Operator.OperatorArray[168+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STFD = Operator.OperatorArray[169+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STFDX = Operator.OperatorArray[170+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STFDU = Operator.OperatorArray[171+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STFS = Operator.OperatorArray[172+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STFSX = Operator.OperatorArray[173+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STFSU = Operator.OperatorArray[174+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STMW = Operator.OperatorArray[175+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_TW = Operator.OperatorArray[176+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_TWI = Operator.OperatorArray[177+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_MFSPR = Operator.OperatorArray[178+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_MTSPR = Operator.OperatorArray[179+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_MFTB = Operator.OperatorArray[180+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_MFTBU = Operator.OperatorArray[181+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SYNC = Operator.OperatorArray[182+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ISYNC = Operator.OperatorArray[183+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_DCBF = Operator.OperatorArray[184+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_DCBST = Operator.OperatorArray[185+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_DCBT = Operator.OperatorArray[186+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_DCBTST = Operator.OperatorArray[187+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_DCBZ = Operator.OperatorArray[188+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_DCBZL = Operator.OperatorArray[189+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_ICBI = Operator.OperatorArray[190+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_EXTSW = Operator.OperatorArray[191+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_EXTSWr = Operator.OperatorArray[192+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_EXTZW = Operator.OperatorArray[193+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_RLDICL = Operator.OperatorArray[194+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_RLDICR = Operator.OperatorArray[195+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_SLD = Operator.OperatorArray[196+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_SLDr = Operator.OperatorArray[197+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_SLDI = Operator.OperatorArray[198+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_SRD = Operator.OperatorArray[199+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_SRDr = Operator.OperatorArray[200+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_SRAD = Operator.OperatorArray[201+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_SRADr = Operator.OperatorArray[202+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_SRADI = Operator.OperatorArray[203+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_SRADIr = Operator.OperatorArray[204+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_SRDI = Operator.OperatorArray[205+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_RLDIMI = Operator.OperatorArray[206+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_RLDIMIr = Operator.OperatorArray[207+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_CMP = Operator.OperatorArray[208+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_CMPI = Operator.OperatorArray[209+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_CMPL = Operator.OperatorArray[210+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_CMPLI = Operator.OperatorArray[211+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_FCFID = Operator.OperatorArray[212+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_FCTIDZ = Operator.OperatorArray[213+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_DIVD = Operator.OperatorArray[214+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_MULLD = Operator.OperatorArray[215+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_LD = Operator.OperatorArray[216+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_LDX = Operator.OperatorArray[217+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_STD = Operator.OperatorArray[218+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_STDX = Operator.OperatorArray[219+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_TD = Operator.OperatorArray[220+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_TDI = Operator.OperatorArray[221+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_CNTLZAddr = Operator.OperatorArray[222+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SRAAddrI = Operator.OperatorArray[223+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_SRAddrI = Operator.OperatorArray[224+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_LWA = Operator.OperatorArray[225+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LInt = Operator.OperatorArray[226+ARCH_INDEPENDENT_END_opcode];
  Operator PPC64_LWAX = Operator.OperatorArray[227+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LIntX = Operator.OperatorArray[228+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LIntUX = Operator.OperatorArray[229+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LAddr = Operator.OperatorArray[230+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LAddrX = Operator.OperatorArray[231+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LAddrU = Operator.OperatorArray[232+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LAddrUX = Operator.OperatorArray[233+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_LAddrARX = Operator.OperatorArray[234+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STAddr = Operator.OperatorArray[235+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STAddrX = Operator.OperatorArray[236+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STAddrU = Operator.OperatorArray[237+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STAddrUX = Operator.OperatorArray[238+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_STAddrCXr = Operator.OperatorArray[239+ARCH_INDEPENDENT_END_opcode];
  Operator PPC_TAddr = Operator.OperatorArray[240+ARCH_INDEPENDENT_END_opcode];
  Operator MIR_END = Operator.OperatorArray[241+ARCH_INDEPENDENT_END_opcode];


}
