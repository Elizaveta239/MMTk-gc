package org.jikesrvm.compilers.opt.lir2mir.ppc; 
public class BURS_Debug {
public static final String[] string = {
	null,     	// 0
	"stm: r",  	// 1
	"r: REGISTER",  	// 2
	"r: czr",  	// 3
	"r: rs",  	// 4
	"r: rz",  	// 5
	"rs: rp",  	// 6
	"rz: rp",  	// 7
	"any: NULL",  	// 8
	"any: r",  	// 9
	"any: ADDRESS_CONSTANT",  	// 10
	"any: INT_CONSTANT",  	// 11
	"any: LONG_CONSTANT",  	// 12
	"any: OTHER_OPERAND(any,any)",  	// 13
	"stm: RESOLVE",  	// 14
	"stm: IG_PATCH_POINT",  	// 15
	"stm: UNINT_BEGIN",  	// 16
	"stm: UNINT_END",  	// 17
	"stm: YIELDPOINT_PROLOGUE",  	// 18
	"stm: YIELDPOINT_EPILOGUE",  	// 19
	"stm: YIELDPOINT_BACKEDGE",  	// 20
	"stm: LOWTABLESWITCH(r)",  	// 21
	"stm: NOP",  	// 22
	"r: GUARD_MOVE",  	// 23
	"r: GUARD_COMBINE",  	// 24
	"stm: NULL_CHECK(r)",  	// 25
	"r: GET_CAUGHT_EXCEPTION",  	// 26
	"stm: SET_CAUGHT_EXCEPTION(r)",  	// 27
	"stm: FENCE",  	// 28
	"stm: WRITE_FLOOR",  	// 29
	"stm: READ_CEILING",  	// 30
	"stm: DCBF(r)",  	// 31
	"stm: DCBST(r)",  	// 32
	"stm: DCBT(r)",  	// 33
	"stm: DCBTST(r)",  	// 34
	"stm: DCBZ(r)",  	// 35
	"stm: DCBZL(r)",  	// 36
	"stm: ICBI(r)",  	// 37
	"stm: TRAP",  	// 38
	"stm: TRAP_IF(r,r)",  	// 39
	"stm: TRAP_IF(r,INT_CONSTANT)",  	// 40
	"stm: TRAP_IF(r,LONG_CONSTANT)",  	// 41
	"r: BOOLEAN_NOT(r)",  	// 42
	"r: BOOLEAN_CMP_INT(r,INT_CONSTANT)",  	// 43
	"r: BOOLEAN_CMP_INT(r,r)",  	// 44
	"boolcmp: BOOLEAN_CMP_INT(r,INT_CONSTANT)",  	// 45
	"boolcmp: BOOLEAN_CMP_INT(r,r)",  	// 46
	"r: BOOLEAN_CMP_ADDR(r,INT_CONSTANT)",  	// 47
	"r: BOOLEAN_CMP_ADDR(r,r)",  	// 48
	"boolcmp: BOOLEAN_CMP_ADDR(r,INT_CONSTANT)",  	// 49
	"boolcmp: BOOLEAN_CMP_ADDR(r,r)",  	// 50
	"boolcmp: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",  	// 51
	"boolcmp: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",  	// 52
	"boolcmp: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",  	// 53
	"boolcmp: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",  	// 54
	"r: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",  	// 55
	"r: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",  	// 56
	"r: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",  	// 57
	"r: BOOLEAN_CMP_INT(boolcmp,INT_CONSTANT)",  	// 58
	"r: REF_ADD(r,INT_CONSTANT)",  	// 59
	"r: REF_ADD(r,r)",  	// 60
	"r: REF_ADD(r,REF_MOVE(INT_CONSTANT))",  	// 61
	"r: REF_ADD(r,REF_MOVE(INT_CONSTANT))",  	// 62
	"r: REF_SUB(r,r)",  	// 63
	"r: REF_SUB(INT_CONSTANT,r)",  	// 64
	"r: INT_MUL(r,INT_CONSTANT)",  	// 65
	"r: INT_MUL(r,r)",  	// 66
	"r: INT_DIV(r,r)",  	// 67
	"r: INT_DIV(r,REF_MOVE(INT_CONSTANT))",  	// 68
	"r: INT_REM(r,r)",  	// 69
	"r: INT_REM(r,REF_MOVE(INT_CONSTANT))",  	// 70
	"r: REF_NEG(r)",  	// 71
	"rz: INT_SHL(r,INT_CONSTANT)",  	// 72
	"rz: INT_SHL(r,r)",  	// 73
	"rz: INT_SHL(INT_USHR(r,INT_CONSTANT),INT_CONSTANT)",  	// 74
	"rs: INT_SHR(r,INT_CONSTANT)",  	// 75
	"rs: INT_SHR(r,r)",  	// 76
	"rp: INT_SHR(REF_AND(r,INT_CONSTANT),INT_CONSTANT)",  	// 77
	"rp: INT_USHR(r,INT_CONSTANT)",  	// 78
	"rz: INT_USHR(r,r)",  	// 79
	"rp: INT_USHR(REF_AND(r,INT_CONSTANT),INT_CONSTANT)",  	// 80
	"rp: INT_USHR(REF_AND(r,REF_MOVE(INT_CONSTANT)),INT_CONSTANT)",  	// 81
	"rp: INT_USHR(INT_SHL(r,INT_CONSTANT),INT_CONSTANT)",  	// 82
	"r: REF_AND(r,r)",  	// 83
	"czr: REF_AND(r,INT_CONSTANT)",  	// 84
	"rp: REF_AND(r,INT_CONSTANT)",  	// 85
	"r: REF_AND(REF_NOT(r),REF_NOT(r))",  	// 86
	"r: REF_AND(r,REF_NOT(r))",  	// 87
	"rp: REF_AND(INT_USHR(r,INT_CONSTANT),INT_CONSTANT)",  	// 88
	"rp: REF_AND(INT_USHR(r,INT_CONSTANT),REF_MOVE(INT_CONSTANT))",  	// 89
	"r: REF_OR(r,r)",  	// 90
	"r: REF_OR(r,INT_CONSTANT)",  	// 91
	"r: REF_OR(REF_NOT(r),REF_NOT(r))",  	// 92
	"r: REF_OR(r,REF_NOT(r))",  	// 93
	"r: REF_XOR(r,r)",  	// 94
	"r: REF_XOR(r,INT_CONSTANT)",  	// 95
	"r: REF_NOT(r)",  	// 96
	"r: REF_NOT(REF_OR(r,r))",  	// 97
	"r: REF_NOT(REF_AND(r,r))",  	// 98
	"r: REF_NOT(REF_XOR(r,r))",  	// 99
	"r: FLOAT_ADD(r,r)",  	// 100
	"r: DOUBLE_ADD(r,r)",  	// 101
	"r: FLOAT_MUL(r,r)",  	// 102
	"r: DOUBLE_MUL(r,r)",  	// 103
	"r: FLOAT_SUB(r,r)",  	// 104
	"r: DOUBLE_SUB(r,r)",  	// 105
	"r: FLOAT_DIV(r,r)",  	// 106
	"r: DOUBLE_DIV(r,r)",  	// 107
	"r: FLOAT_NEG(r)",  	// 108
	"r: DOUBLE_NEG(r)",  	// 109
	"r: FLOAT_SQRT(r)",  	// 110
	"r: DOUBLE_SQRT(r)",  	// 111
	"r: FLOAT_ADD(FLOAT_MUL(r,r),r)",  	// 112
	"r: DOUBLE_ADD(DOUBLE_MUL(r,r),r)",  	// 113
	"r: FLOAT_ADD(r,FLOAT_MUL(r,r))",  	// 114
	"r: DOUBLE_ADD(r,DOUBLE_MUL(r,r))",  	// 115
	"r: FLOAT_SUB(FLOAT_MUL(r,r),r)",  	// 116
	"r: DOUBLE_SUB(DOUBLE_MUL(r,r),r)",  	// 117
	"r: FLOAT_NEG(FLOAT_ADD(FLOAT_MUL(r,r),r))",  	// 118
	"r: DOUBLE_NEG(DOUBLE_ADD(DOUBLE_MUL(r,r),r))",  	// 119
	"r: FLOAT_NEG(FLOAT_ADD(r,FLOAT_MUL(r,r)))",  	// 120
	"r: DOUBLE_NEG(DOUBLE_ADD(r,DOUBLE_MUL(r,r)))",  	// 121
	"r: FLOAT_NEG(FLOAT_SUB(FLOAT_MUL(r,r),r))",  	// 122
	"r: DOUBLE_NEG(DOUBLE_SUB(DOUBLE_MUL(r,r),r))",  	// 123
	"rs: INT_2BYTE(r)",  	// 124
	"rp: INT_2USHORT(r)",  	// 125
	"rs: INT_2SHORT(r)",  	// 126
	"r: INT_2FLOAT(r)",  	// 127
	"r: INT_2DOUBLE(r)",  	// 128
	"r: FLOAT_2INT(r)",  	// 129
	"r: FLOAT_2DOUBLE(r)",  	// 130
	"r: DOUBLE_2INT(r)",  	// 131
	"r: DOUBLE_2FLOAT(r)",  	// 132
	"r: FLOAT_AS_INT_BITS(r)",  	// 133
	"r: INT_BITS_AS_FLOAT(r)",  	// 134
	"r: REF_MOVE(r)",  	// 135
	"rs: REF_MOVE(INT_CONSTANT)",  	// 136
	"rs: REF_MOVE(INT_CONSTANT)",  	// 137
	"rs: REF_MOVE(INT_CONSTANT)",  	// 138
	"r: FLOAT_MOVE(r)",  	// 139
	"r: DOUBLE_MOVE(r)",  	// 140
	"rs: BYTE_LOAD(r,INT_CONSTANT)",  	// 141
	"rs: BYTE_LOAD(r,r)",  	// 142
	"rp: REF_AND(BYTE_LOAD(r,r),INT_CONSTANT)",  	// 143
	"rp: REF_AND(BYTE_LOAD(r,INT_CONSTANT),INT_CONSTANT)",  	// 144
	"rp: UBYTE_LOAD(r,INT_CONSTANT)",  	// 145
	"rp: UBYTE_LOAD(r,r)",  	// 146
	"rs: SHORT_LOAD(r,INT_CONSTANT)",  	// 147
	"rs: SHORT_LOAD(r,r)",  	// 148
	"rp: USHORT_LOAD(r,INT_CONSTANT)",  	// 149
	"rp: USHORT_LOAD(r,r)",  	// 150
	"r: FLOAT_LOAD(r,INT_CONSTANT)",  	// 151
	"r: FLOAT_LOAD(r,REF_MOVE(ADDRESS_CONSTANT))",  	// 152
	"r: FLOAT_LOAD(r,r)",  	// 153
	"r: DOUBLE_LOAD(r,INT_CONSTANT)",  	// 154
	"r: DOUBLE_LOAD(r,REF_MOVE(ADDRESS_CONSTANT))",  	// 155
	"r: DOUBLE_LOAD(r,r)",  	// 156
	"rs: INT_LOAD(r,INT_CONSTANT)",  	// 157
	"rs: INT_LOAD(r,REF_MOVE(ADDRESS_CONSTANT))",  	// 158
	"rs: INT_LOAD(r,r)",  	// 159
	"rs: INT_LOAD(REF_ADD(r,r),INT_CONSTANT)",  	// 160
	"rs: INT_LOAD(REF_ADD(r,INT_CONSTANT),INT_CONSTANT)",  	// 161
	"stm: BYTE_STORE(r,OTHER_OPERAND(r,INT_CONSTANT))",  	// 162
	"stm: BYTE_STORE(r,OTHER_OPERAND(r,r))",  	// 163
	"stm: BYTE_STORE(INT_2BYTE(r),OTHER_OPERAND(r,INT_CONSTANT))",  	// 164
	"stm: BYTE_STORE(INT_2BYTE(r),OTHER_OPERAND(r,r))",  	// 165
	"stm: SHORT_STORE(r,OTHER_OPERAND(r,INT_CONSTANT))",  	// 166
	"stm: SHORT_STORE(r,OTHER_OPERAND(r,r))",  	// 167
	"stm: SHORT_STORE(INT_2SHORT(r),OTHER_OPERAND(r,INT_CONSTANT))",  	// 168
	"stm: SHORT_STORE(INT_2SHORT(r),OTHER_OPERAND(r,r))",  	// 169
	"stm: SHORT_STORE(INT_2USHORT(r),OTHER_OPERAND(r,INT_CONSTANT))",  	// 170
	"stm: SHORT_STORE(INT_2USHORT(r),OTHER_OPERAND(r,r))",  	// 171
	"stm: INT_STORE(r,OTHER_OPERAND(r,INT_CONSTANT))",  	// 172
	"stm: INT_STORE(r,OTHER_OPERAND(r,REF_MOVE(ADDRESS_CONSTANT)))",  	// 173
	"stm: INT_STORE(r,OTHER_OPERAND(r,r))",  	// 174
	"stm: INT_STORE(r,OTHER_OPERAND(REF_ADD(r,INT_CONSTANT),INT_CONSTANT))",  	// 175
	"stm: FLOAT_STORE(r,OTHER_OPERAND(r,INT_CONSTANT))",  	// 176
	"stm: FLOAT_STORE(r,OTHER_OPERAND(r,REF_MOVE(ADDRESS_CONSTANT)))",  	// 177
	"stm: FLOAT_STORE(r,OTHER_OPERAND(r,r))",  	// 178
	"stm: DOUBLE_STORE(r,OTHER_OPERAND(r,INT_CONSTANT))",  	// 179
	"stm: DOUBLE_STORE(r,OTHER_OPERAND(r,REF_MOVE(ADDRESS_CONSTANT)))",  	// 180
	"stm: DOUBLE_STORE(r,OTHER_OPERAND(r,r))",  	// 181
	"stm: INT_IFCMP(r,r)",  	// 182
	"stm: INT_IFCMP(r,INT_CONSTANT)",  	// 183
	"stm: INT_IFCMP(INT_2BYTE(r),INT_CONSTANT)",  	// 184
	"stm: INT_IFCMP(INT_2SHORT(r),INT_CONSTANT)",  	// 185
	"stm: INT_IFCMP(INT_USHR(r,r),INT_CONSTANT)",  	// 186
	"stm: INT_IFCMP(INT_SHL(r,r),INT_CONSTANT)",  	// 187
	"stm: INT_IFCMP(INT_SHR(r,r),INT_CONSTANT)",  	// 188
	"stm: INT_IFCMP(INT_USHR(r,INT_CONSTANT),INT_CONSTANT)",  	// 189
	"stm: INT_IFCMP(INT_SHL(r,INT_CONSTANT),INT_CONSTANT)",  	// 190
	"stm: INT_IFCMP(INT_SHR(r,INT_CONSTANT),INT_CONSTANT)",  	// 191
	"stm: INT_IFCMP(REF_AND(r,INT_CONSTANT),INT_CONSTANT)",  	// 192
	"stm: INT_IFCMP(boolcmp,INT_CONSTANT)",  	// 193
	"stm: INT_IFCMP(boolcmp,INT_CONSTANT)",  	// 194
	"stm: INT_IFCMP(boolcmp,INT_CONSTANT)",  	// 195
	"stm: INT_IFCMP(boolcmp,INT_CONSTANT)",  	// 196
	"stm: INT_IFCMP2(r,r)",  	// 197
	"stm: INT_IFCMP2(r,INT_CONSTANT)",  	// 198
	"stm: FLOAT_IFCMP(r,r)",  	// 199
	"stm: DOUBLE_IFCMP(r,r)",  	// 200
	"stm: FLOAT_CMPL(r,r)",  	// 201
	"stm: FLOAT_CMPG(r,r)",  	// 202
	"stm: DOUBLE_CMPL(r,r)",  	// 203
	"stm: DOUBLE_CMPG(r,r)",  	// 204
	"stm: GOTO",  	// 205
	"stm: RETURN(NULL)",  	// 206
	"stm: RETURN(r)",  	// 207
	"r: CALL(r,any)",  	// 208
	"r: CALL(BRANCH_TARGET,any)",  	// 209
	"r: SYSCALL(r,any)",  	// 210
	"r: GET_TIME_BASE",  	// 211
	"r: OTHER_OPERAND(r,r)",  	// 212
	"r: YIELDPOINT_OSR(any,any)",  	// 213
	"r: PREPARE_INT(r,r)",  	// 214
	"r: PREPARE_LONG(r,r)",  	// 215
	"r: ATTEMPT_INT(r,r)",  	// 216
	"r: ATTEMPT_LONG(r,r)",  	// 217
	"stm: IR_PROLOGUE",  	// 218
	"r: LONG_ADD(r,r)",  	// 219
	"r: LONG_SUB(r,r)",  	// 220
	"r: LONG_MUL(r,r)",  	// 221
	"r: LONG_NEG(r)",  	// 222
	"r: LONG_SHL(r,r)",  	// 223
	"r: LONG_SHL(r,INT_CONSTANT)",  	// 224
	"r: LONG_SHR(r,r)",  	// 225
	"r: LONG_SHR(r,INT_CONSTANT)",  	// 226
	"r: LONG_USHR(r,r)",  	// 227
	"r: LONG_USHR(r,INT_CONSTANT)",  	// 228
	"r: LONG_AND(r,r)",  	// 229
	"r: LONG_OR(r,r)",  	// 230
	"r: LONG_XOR(r,r)",  	// 231
	"r: LONG_NOT(r)",  	// 232
	"r: INT_2LONG(r)",  	// 233
	"r: LONG_2INT(r)",  	// 234
	"r: DOUBLE_AS_LONG_BITS(r)",  	// 235
	"r: LONG_BITS_AS_DOUBLE(r)",  	// 236
	"r: LONG_MOVE(LONG_CONSTANT)",  	// 237
	"r: LONG_MOVE(r)",  	// 238
	"stm: LONG_CMP(r,r)",  	// 239
	"stm: LONG_IFCMP(r,r)",  	// 240
	"stm: INT_IFCMP(ATTEMPT_INT(r,r),INT_CONSTANT)",  	// 241
	"stm: INT_IFCMP(ATTEMPT_ADDR(r,r),INT_CONSTANT)",  	// 242
	"stm: INT_IFCMP(REF_NEG(r),INT_CONSTANT)",  	// 243
	"stm: INT_IFCMP(REF_NOT(r),INT_CONSTANT)",  	// 244
	"stm: INT_IFCMP(REF_ADD(r,r),INT_CONSTANT)",  	// 245
	"stm: INT_IFCMP(REF_AND(r,r),INT_CONSTANT)",  	// 246
	"stm: INT_IFCMP(REF_OR(r,r),INT_CONSTANT)",  	// 247
	"stm: INT_IFCMP(REF_XOR(r,r),INT_CONSTANT)",  	// 248
	"stm: INT_IFCMP(REF_AND(r,REF_MOVE(INT_CONSTANT)),INT_CONSTANT)",  	// 249
	"stm: INT_IFCMP(REF_AND(r,REF_MOVE(INT_CONSTANT)),INT_CONSTANT)",  	// 250
	"stm: INT_IFCMP(REF_ADD(r,INT_CONSTANT),INT_CONSTANT)",  	// 251
	"stm: INT_IFCMP(REF_AND(r,REF_NOT(r)),INT_CONSTANT)",  	// 252
	"stm: INT_IFCMP(REF_OR(r,REF_NOT(r)),INT_CONSTANT)",  	// 253
	"czr: REF_AND(r,REF_MOVE(INT_CONSTANT))",  	// 254
	"r: REF_AND(r,REF_MOVE(INT_CONSTANT))",  	// 255
	"r: REF_OR(r,REF_MOVE(INT_CONSTANT))",  	// 256
	"r: REF_OR(r,REF_MOVE(INT_CONSTANT))",  	// 257
	"r: REF_XOR(r,REF_MOVE(INT_CONSTANT))",  	// 258
	"r: REF_MOVE(ADDRESS_CONSTANT)",  	// 259
	"r: REF_MOVE(ADDRESS_CONSTANT)",  	// 260
	"r: REF_MOVE(ADDRESS_CONSTANT)",  	// 261
	"r: LONG_LOAD(r,INT_CONSTANT)",  	// 262
	"r: LONG_LOAD(r,REF_MOVE(ADDRESS_CONSTANT))",  	// 263
	"r: LONG_LOAD(r,r)",  	// 264
	"stm: LONG_STORE(r,OTHER_OPERAND(r,INT_CONSTANT))",  	// 265
	"stm: LONG_STORE(r,OTHER_OPERAND(r,REF_MOVE(ADDRESS_CONSTANT)))",  	// 266
	"stm: LONG_STORE(r,OTHER_OPERAND(r,r))",  	// 267
	"r: PREPARE_ADDR(r,r)",  	// 268
	"r: ATTEMPT_ADDR(r,r)",  	// 269
};

}
