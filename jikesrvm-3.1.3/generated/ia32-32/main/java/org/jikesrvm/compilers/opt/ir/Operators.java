/*
 *  This file is part of the Jikes RVM project (http://jikesrvm.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License. You
 *  may obtain a copy of the License at
 *
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  See the COPYRIGHT.txt file distributed with this work for information
 *  regarding copyright ownership.
 */

/*
 * THIS FILE IS MACHINE GENERATED. DO NOT EDIT.
 * The input files are:
 *  Operators.template
 *  OperatorList.dat
 *  /home/elizabeth/sum13/ideal/MMTk-gc/jikesrvm-3.1.3/rvm/src-generated/opt-ir/ia32/OperatorList.dat
 */

package org.jikesrvm.compilers.opt.ir;

import org.jikesrvm.compilers.opt.ir.ia32.MachineSpecificIRIA;

/**
 * Interface with all operator names and opcodes.
 *
 * @see Operator
 */
public interface Operators {

  MachineSpecificIR helper =
                                              MachineSpecificIRIA.IA32.singleton;

  char GET_CAUGHT_EXCEPTION_opcode = (char)0;
  char SET_CAUGHT_EXCEPTION_opcode = (char)1;
  char NEW_opcode = (char)2;
  char NEW_UNRESOLVED_opcode = (char)3;
  char NEWARRAY_opcode = (char)4;
  char NEWARRAY_UNRESOLVED_opcode = (char)5;
  char ATHROW_opcode = (char)6;
  char CHECKCAST_opcode = (char)7;
  char CHECKCAST_NOTNULL_opcode = (char)8;
  char CHECKCAST_UNRESOLVED_opcode = (char)9;
  char MUST_IMPLEMENT_INTERFACE_opcode = (char)10;
  char INSTANCEOF_opcode = (char)11;
  char INSTANCEOF_NOTNULL_opcode = (char)12;
  char INSTANCEOF_UNRESOLVED_opcode = (char)13;
  char MONITORENTER_opcode = (char)14;
  char MONITOREXIT_opcode = (char)15;
  char NEWOBJMULTIARRAY_opcode = (char)16;
  char GETSTATIC_opcode = (char)17;
  char PUTSTATIC_opcode = (char)18;
  char GETFIELD_opcode = (char)19;
  char PUTFIELD_opcode = (char)20;
  char INT_ZERO_CHECK_opcode = (char)21;
  char LONG_ZERO_CHECK_opcode = (char)22;
  char BOUNDS_CHECK_opcode = (char)23;
  char OBJARRAY_STORE_CHECK_opcode = (char)24;
  char OBJARRAY_STORE_CHECK_NOTNULL_opcode = (char)25;
  char IG_PATCH_POINT_opcode = (char)26;
  char IG_CLASS_TEST_opcode = (char)27;
  char IG_METHOD_TEST_opcode = (char)28;
  char TABLESWITCH_opcode = (char)29;
  char LOOKUPSWITCH_opcode = (char)30;
  char INT_ALOAD_opcode = (char)31;
  char LONG_ALOAD_opcode = (char)32;
  char FLOAT_ALOAD_opcode = (char)33;
  char DOUBLE_ALOAD_opcode = (char)34;
  char REF_ALOAD_opcode = (char)35;
  char UBYTE_ALOAD_opcode = (char)36;
  char BYTE_ALOAD_opcode = (char)37;
  char USHORT_ALOAD_opcode = (char)38;
  char SHORT_ALOAD_opcode = (char)39;
  char INT_ASTORE_opcode = (char)40;
  char LONG_ASTORE_opcode = (char)41;
  char FLOAT_ASTORE_opcode = (char)42;
  char DOUBLE_ASTORE_opcode = (char)43;
  char REF_ASTORE_opcode = (char)44;
  char BYTE_ASTORE_opcode = (char)45;
  char SHORT_ASTORE_opcode = (char)46;
  char INT_IFCMP_opcode = (char)47;
  char INT_IFCMP2_opcode = (char)48;
  char LONG_IFCMP_opcode = (char)49;
  char FLOAT_IFCMP_opcode = (char)50;
  char DOUBLE_IFCMP_opcode = (char)51;
  char REF_IFCMP_opcode = (char)52;
  char LABEL_opcode = (char)53;
  char BBEND_opcode = (char)54;
  char UNINT_BEGIN_opcode = (char)55;
  char UNINT_END_opcode = (char)56;
  char FENCE_opcode = (char)57;
  char READ_CEILING_opcode = (char)58;
  char WRITE_FLOOR_opcode = (char)59;
  char PHI_opcode = (char)60;
  char SPLIT_opcode = (char)61;
  char PI_opcode = (char)62;
  char NOP_opcode = (char)63;
  char INT_MOVE_opcode = (char)64;
  char LONG_MOVE_opcode = (char)65;
  char FLOAT_MOVE_opcode = (char)66;
  char DOUBLE_MOVE_opcode = (char)67;
  char REF_MOVE_opcode = (char)68;
  char GUARD_MOVE_opcode = (char)69;
  char INT_COND_MOVE_opcode = (char)70;
  char LONG_COND_MOVE_opcode = (char)71;
  char FLOAT_COND_MOVE_opcode = (char)72;
  char DOUBLE_COND_MOVE_opcode = (char)73;
  char REF_COND_MOVE_opcode = (char)74;
  char GUARD_COND_MOVE_opcode = (char)75;
  char GUARD_COMBINE_opcode = (char)76;
  char REF_ADD_opcode = (char)77;
  char INT_ADD_opcode = (char)78;
  char LONG_ADD_opcode = (char)79;
  char FLOAT_ADD_opcode = (char)80;
  char DOUBLE_ADD_opcode = (char)81;
  char REF_SUB_opcode = (char)82;
  char INT_SUB_opcode = (char)83;
  char LONG_SUB_opcode = (char)84;
  char FLOAT_SUB_opcode = (char)85;
  char DOUBLE_SUB_opcode = (char)86;
  char INT_MUL_opcode = (char)87;
  char LONG_MUL_opcode = (char)88;
  char FLOAT_MUL_opcode = (char)89;
  char DOUBLE_MUL_opcode = (char)90;
  char INT_DIV_opcode = (char)91;
  char LONG_DIV_opcode = (char)92;
  char FLOAT_DIV_opcode = (char)93;
  char DOUBLE_DIV_opcode = (char)94;
  char INT_REM_opcode = (char)95;
  char LONG_REM_opcode = (char)96;
  char FLOAT_REM_opcode = (char)97;
  char DOUBLE_REM_opcode = (char)98;
  char REF_NEG_opcode = (char)99;
  char INT_NEG_opcode = (char)100;
  char LONG_NEG_opcode = (char)101;
  char FLOAT_NEG_opcode = (char)102;
  char DOUBLE_NEG_opcode = (char)103;
  char FLOAT_SQRT_opcode = (char)104;
  char DOUBLE_SQRT_opcode = (char)105;
  char REF_SHL_opcode = (char)106;
  char INT_SHL_opcode = (char)107;
  char LONG_SHL_opcode = (char)108;
  char REF_SHR_opcode = (char)109;
  char INT_SHR_opcode = (char)110;
  char LONG_SHR_opcode = (char)111;
  char REF_USHR_opcode = (char)112;
  char INT_USHR_opcode = (char)113;
  char LONG_USHR_opcode = (char)114;
  char REF_AND_opcode = (char)115;
  char INT_AND_opcode = (char)116;
  char LONG_AND_opcode = (char)117;
  char REF_OR_opcode = (char)118;
  char INT_OR_opcode = (char)119;
  char LONG_OR_opcode = (char)120;
  char REF_XOR_opcode = (char)121;
  char INT_XOR_opcode = (char)122;
  char REF_NOT_opcode = (char)123;
  char INT_NOT_opcode = (char)124;
  char LONG_NOT_opcode = (char)125;
  char LONG_XOR_opcode = (char)126;
  char INT_2ADDRSigExt_opcode = (char)127;
  char INT_2ADDRZerExt_opcode = (char)128;
  char LONG_2ADDR_opcode = (char)129;
  char ADDR_2INT_opcode = (char)130;
  char ADDR_2LONG_opcode = (char)131;
  char INT_2LONG_opcode = (char)132;
  char INT_2FLOAT_opcode = (char)133;
  char INT_2DOUBLE_opcode = (char)134;
  char LONG_2INT_opcode = (char)135;
  char LONG_2FLOAT_opcode = (char)136;
  char LONG_2DOUBLE_opcode = (char)137;
  char FLOAT_2INT_opcode = (char)138;
  char FLOAT_2LONG_opcode = (char)139;
  char FLOAT_2DOUBLE_opcode = (char)140;
  char DOUBLE_2INT_opcode = (char)141;
  char DOUBLE_2LONG_opcode = (char)142;
  char DOUBLE_2FLOAT_opcode = (char)143;
  char INT_2BYTE_opcode = (char)144;
  char INT_2USHORT_opcode = (char)145;
  char INT_2SHORT_opcode = (char)146;
  char LONG_CMP_opcode = (char)147;
  char FLOAT_CMPL_opcode = (char)148;
  char FLOAT_CMPG_opcode = (char)149;
  char DOUBLE_CMPL_opcode = (char)150;
  char DOUBLE_CMPG_opcode = (char)151;
  char RETURN_opcode = (char)152;
  char NULL_CHECK_opcode = (char)153;
  char GOTO_opcode = (char)154;
  char BOOLEAN_NOT_opcode = (char)155;
  char BOOLEAN_CMP_INT_opcode = (char)156;
  char BOOLEAN_CMP_ADDR_opcode = (char)157;
  char BOOLEAN_CMP_LONG_opcode = (char)158;
  char BOOLEAN_CMP_FLOAT_opcode = (char)159;
  char BOOLEAN_CMP_DOUBLE_opcode = (char)160;
  char BYTE_LOAD_opcode = (char)161;
  char UBYTE_LOAD_opcode = (char)162;
  char SHORT_LOAD_opcode = (char)163;
  char USHORT_LOAD_opcode = (char)164;
  char REF_LOAD_opcode = (char)165;
  char REF_STORE_opcode = (char)166;
  char INT_LOAD_opcode = (char)167;
  char LONG_LOAD_opcode = (char)168;
  char FLOAT_LOAD_opcode = (char)169;
  char DOUBLE_LOAD_opcode = (char)170;
  char BYTE_STORE_opcode = (char)171;
  char SHORT_STORE_opcode = (char)172;
  char INT_STORE_opcode = (char)173;
  char LONG_STORE_opcode = (char)174;
  char FLOAT_STORE_opcode = (char)175;
  char DOUBLE_STORE_opcode = (char)176;
  char PREPARE_INT_opcode = (char)177;
  char PREPARE_ADDR_opcode = (char)178;
  char PREPARE_LONG_opcode = (char)179;
  char ATTEMPT_INT_opcode = (char)180;
  char ATTEMPT_ADDR_opcode = (char)181;
  char ATTEMPT_LONG_opcode = (char)182;
  char CALL_opcode = (char)183;
  char SYSCALL_opcode = (char)184;
  char YIELDPOINT_PROLOGUE_opcode = (char)185;
  char YIELDPOINT_EPILOGUE_opcode = (char)186;
  char YIELDPOINT_BACKEDGE_opcode = (char)187;
  char YIELDPOINT_OSR_opcode = (char)188;
  char OSR_BARRIER_opcode = (char)189;
  char IR_PROLOGUE_opcode = (char)190;
  char RESOLVE_opcode = (char)191;
  char RESOLVE_MEMBER_opcode = (char)192;
  char GET_TIME_BASE_opcode = (char)193;
  char INSTRUMENTED_EVENT_COUNTER_opcode = (char)194;
  char TRAP_IF_opcode = (char)195;
  char TRAP_opcode = (char)196;
  char FLOAT_AS_INT_BITS_opcode = (char)197;
  char INT_BITS_AS_FLOAT_opcode = (char)198;
  char DOUBLE_AS_LONG_BITS_opcode = (char)199;
  char LONG_BITS_AS_DOUBLE_opcode = (char)200;
  char ARRAYLENGTH_opcode = (char)201;
  char GET_OBJ_TIB_opcode = (char)202;
  char GET_CLASS_TIB_opcode = (char)203;
  char GET_TYPE_FROM_TIB_opcode = (char)204;
  char GET_SUPERCLASS_IDS_FROM_TIB_opcode = (char)205;
  char GET_DOES_IMPLEMENT_FROM_TIB_opcode = (char)206;
  char GET_ARRAY_ELEMENT_TIB_FROM_TIB_opcode = (char)207;
  char LOWTABLESWITCH_opcode = (char)208;
  char ARCH_INDEPENDENT_END_opcode = (char)209;
  //////////////////////////
  // END   Architecture Independent opcodes.
  // BEGIN Architecture Dependent opcodes & MIR.
  //////////////////////////
  char ADDRESS_CONSTANT_opcode = (char)(0 + ARCH_INDEPENDENT_END_opcode);
  char INT_CONSTANT_opcode = (char)(1 + ARCH_INDEPENDENT_END_opcode);
  char LONG_CONSTANT_opcode = (char)(2 + ARCH_INDEPENDENT_END_opcode);
  char REGISTER_opcode = (char)(3 + ARCH_INDEPENDENT_END_opcode);
  char OTHER_OPERAND_opcode = (char)(4 + ARCH_INDEPENDENT_END_opcode);
  char NULL_opcode = (char)(5 + ARCH_INDEPENDENT_END_opcode);
  char BRANCH_TARGET_opcode = (char)(6 + ARCH_INDEPENDENT_END_opcode);
  char MATERIALIZE_FP_CONSTANT_opcode = (char)(7 + ARCH_INDEPENDENT_END_opcode);
  char GET_CURRENT_PROCESSOR_opcode = (char)(8 + ARCH_INDEPENDENT_END_opcode);
  char ROUND_TO_ZERO_opcode = (char)(9 + ARCH_INDEPENDENT_END_opcode);
  char CLEAR_FLOATING_POINT_STATE_opcode = (char)(10 + ARCH_INDEPENDENT_END_opcode);
  char PREFETCH_opcode = (char)(11 + ARCH_INDEPENDENT_END_opcode);
  char PAUSE_opcode = (char)(12 + ARCH_INDEPENDENT_END_opcode);
  char FP_ADD_opcode = (char)(13 + ARCH_INDEPENDENT_END_opcode);
  char FP_SUB_opcode = (char)(14 + ARCH_INDEPENDENT_END_opcode);
  char FP_MUL_opcode = (char)(15 + ARCH_INDEPENDENT_END_opcode);
  char FP_DIV_opcode = (char)(16 + ARCH_INDEPENDENT_END_opcode);
  char FP_NEG_opcode = (char)(17 + ARCH_INDEPENDENT_END_opcode);
  char FP_REM_opcode = (char)(18 + ARCH_INDEPENDENT_END_opcode);
  char INT_2FP_opcode = (char)(19 + ARCH_INDEPENDENT_END_opcode);
  char LONG_2FP_opcode = (char)(20 + ARCH_INDEPENDENT_END_opcode);
  char CMP_CMOV_opcode = (char)(21 + ARCH_INDEPENDENT_END_opcode);
  char FCMP_CMOV_opcode = (char)(22 + ARCH_INDEPENDENT_END_opcode);
  char LCMP_CMOV_opcode = (char)(23 + ARCH_INDEPENDENT_END_opcode);
  char CMP_FCMOV_opcode = (char)(24 + ARCH_INDEPENDENT_END_opcode);
  char FCMP_FCMOV_opcode = (char)(25 + ARCH_INDEPENDENT_END_opcode);
  char CALL_SAVE_VOLATILE_opcode = (char)(26 + ARCH_INDEPENDENT_END_opcode);
  char MIR_START_opcode = (char)(27 + ARCH_INDEPENDENT_END_opcode);
  char REQUIRE_ESP_opcode = (char)(28 + ARCH_INDEPENDENT_END_opcode);
  char ADVISE_ESP_opcode = (char)(29 + ARCH_INDEPENDENT_END_opcode);
  char MIR_LOWTABLESWITCH_opcode = (char)(30 + ARCH_INDEPENDENT_END_opcode);
  char IA32_METHODSTART_opcode = (char)(31 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FCLEAR_opcode = (char)(32 + ARCH_INDEPENDENT_END_opcode);
  char DUMMY_DEF_opcode = (char)(33 + ARCH_INDEPENDENT_END_opcode);
  char DUMMY_USE_opcode = (char)(34 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FMOV_ENDING_LIVE_RANGE_opcode = (char)(35 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FMOV_opcode = (char)(36 + ARCH_INDEPENDENT_END_opcode);
  char IA32_TRAPIF_opcode = (char)(37 + ARCH_INDEPENDENT_END_opcode);
  char IA32_OFFSET_opcode = (char)(38 + ARCH_INDEPENDENT_END_opcode);
  char IA32_LOCK_CMPXCHG_opcode = (char)(39 + ARCH_INDEPENDENT_END_opcode);
  char IA32_LOCK_CMPXCHG8B_opcode = (char)(40 + ARCH_INDEPENDENT_END_opcode);
  char IA32_ADC_opcode = (char)(41 + ARCH_INDEPENDENT_END_opcode);
  char IA32_ADD_opcode = (char)(42 + ARCH_INDEPENDENT_END_opcode);
  char IA32_AND_opcode = (char)(43 + ARCH_INDEPENDENT_END_opcode);
  char IA32_BSWAP_opcode = (char)(44 + ARCH_INDEPENDENT_END_opcode);
  char IA32_BT_opcode = (char)(45 + ARCH_INDEPENDENT_END_opcode);
  char IA32_BTC_opcode = (char)(46 + ARCH_INDEPENDENT_END_opcode);
  char IA32_BTR_opcode = (char)(47 + ARCH_INDEPENDENT_END_opcode);
  char IA32_BTS_opcode = (char)(48 + ARCH_INDEPENDENT_END_opcode);
  char IA32_SYSCALL_opcode = (char)(49 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CALL_opcode = (char)(50 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CDQ_opcode = (char)(51 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CDO_opcode = (char)(52 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CDQE_opcode = (char)(53 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMOV_opcode = (char)(54 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMP_opcode = (char)(55 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPXCHG_opcode = (char)(56 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPXCHG8B_opcode = (char)(57 + ARCH_INDEPENDENT_END_opcode);
  char IA32_DEC_opcode = (char)(58 + ARCH_INDEPENDENT_END_opcode);
  char IA32_DIV_opcode = (char)(59 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FADD_opcode = (char)(60 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FADDP_opcode = (char)(61 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FCHS_opcode = (char)(62 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FCMOV_opcode = (char)(63 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FCOMI_opcode = (char)(64 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FCOMIP_opcode = (char)(65 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FDIV_opcode = (char)(66 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FDIVP_opcode = (char)(67 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FDIVR_opcode = (char)(68 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FDIVRP_opcode = (char)(69 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FEXAM_opcode = (char)(70 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FXCH_opcode = (char)(71 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FFREE_opcode = (char)(72 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FIADD_opcode = (char)(73 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FIDIV_opcode = (char)(74 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FIDIVR_opcode = (char)(75 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FILD_opcode = (char)(76 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FIMUL_opcode = (char)(77 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FINIT_opcode = (char)(78 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FIST_opcode = (char)(79 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FISTP_opcode = (char)(80 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FISUB_opcode = (char)(81 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FISUBR_opcode = (char)(82 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FLD_opcode = (char)(83 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FLDCW_opcode = (char)(84 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FLD1_opcode = (char)(85 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FLDL2T_opcode = (char)(86 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FLDL2E_opcode = (char)(87 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FLDPI_opcode = (char)(88 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FLDLG2_opcode = (char)(89 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FLDLN2_opcode = (char)(90 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FLDZ_opcode = (char)(91 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FMUL_opcode = (char)(92 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FMULP_opcode = (char)(93 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FNSTCW_opcode = (char)(94 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FNINIT_opcode = (char)(95 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FNSAVE_opcode = (char)(96 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FPREM_opcode = (char)(97 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FRSTOR_opcode = (char)(98 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FST_opcode = (char)(99 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FSTCW_opcode = (char)(100 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FSTP_opcode = (char)(101 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FSUB_opcode = (char)(102 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FSUBP_opcode = (char)(103 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FSUBR_opcode = (char)(104 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FSUBRP_opcode = (char)(105 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FUCOMI_opcode = (char)(106 + ARCH_INDEPENDENT_END_opcode);
  char IA32_FUCOMIP_opcode = (char)(107 + ARCH_INDEPENDENT_END_opcode);
  char IA32_IDIV_opcode = (char)(108 + ARCH_INDEPENDENT_END_opcode);
  char IA32_IMUL1_opcode = (char)(109 + ARCH_INDEPENDENT_END_opcode);
  char IA32_IMUL2_opcode = (char)(110 + ARCH_INDEPENDENT_END_opcode);
  char IA32_INC_opcode = (char)(111 + ARCH_INDEPENDENT_END_opcode);
  char IA32_INT_opcode = (char)(112 + ARCH_INDEPENDENT_END_opcode);
  char IA32_JCC_opcode = (char)(113 + ARCH_INDEPENDENT_END_opcode);
  char IA32_JCC2_opcode = (char)(114 + ARCH_INDEPENDENT_END_opcode);
  char IA32_JMP_opcode = (char)(115 + ARCH_INDEPENDENT_END_opcode);
  char IA32_LEA_opcode = (char)(116 + ARCH_INDEPENDENT_END_opcode);
  char IA32_LOCK_opcode = (char)(117 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOV_opcode = (char)(118 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOVZX__B_opcode = (char)(119 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOVSX__B_opcode = (char)(120 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOVZX__W_opcode = (char)(121 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOVSX__W_opcode = (char)(122 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOVZXQ__B_opcode = (char)(123 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOVSXQ__B_opcode = (char)(124 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOVZXQ__W_opcode = (char)(125 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOVSXQ__W_opcode = (char)(126 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MUL_opcode = (char)(127 + ARCH_INDEPENDENT_END_opcode);
  char IA32_NEG_opcode = (char)(128 + ARCH_INDEPENDENT_END_opcode);
  char IA32_NOT_opcode = (char)(129 + ARCH_INDEPENDENT_END_opcode);
  char IA32_OR_opcode = (char)(130 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MFENCE_opcode = (char)(131 + ARCH_INDEPENDENT_END_opcode);
  char IA32_PAUSE_opcode = (char)(132 + ARCH_INDEPENDENT_END_opcode);
  char IA32_PREFETCHNTA_opcode = (char)(133 + ARCH_INDEPENDENT_END_opcode);
  char IA32_POP_opcode = (char)(134 + ARCH_INDEPENDENT_END_opcode);
  char IA32_PUSH_opcode = (char)(135 + ARCH_INDEPENDENT_END_opcode);
  char IA32_RCL_opcode = (char)(136 + ARCH_INDEPENDENT_END_opcode);
  char IA32_RCR_opcode = (char)(137 + ARCH_INDEPENDENT_END_opcode);
  char IA32_ROL_opcode = (char)(138 + ARCH_INDEPENDENT_END_opcode);
  char IA32_ROR_opcode = (char)(139 + ARCH_INDEPENDENT_END_opcode);
  char IA32_RET_opcode = (char)(140 + ARCH_INDEPENDENT_END_opcode);
  char IA32_SAL_opcode = (char)(141 + ARCH_INDEPENDENT_END_opcode);
  char IA32_SAR_opcode = (char)(142 + ARCH_INDEPENDENT_END_opcode);
  char IA32_SHL_opcode = (char)(143 + ARCH_INDEPENDENT_END_opcode);
  char IA32_SHR_opcode = (char)(144 + ARCH_INDEPENDENT_END_opcode);
  char IA32_SBB_opcode = (char)(145 + ARCH_INDEPENDENT_END_opcode);
  char IA32_SET__B_opcode = (char)(146 + ARCH_INDEPENDENT_END_opcode);
  char IA32_SHLD_opcode = (char)(147 + ARCH_INDEPENDENT_END_opcode);
  char IA32_SHRD_opcode = (char)(148 + ARCH_INDEPENDENT_END_opcode);
  char IA32_SUB_opcode = (char)(149 + ARCH_INDEPENDENT_END_opcode);
  char IA32_TEST_opcode = (char)(150 + ARCH_INDEPENDENT_END_opcode);
  char IA32_XOR_opcode = (char)(151 + ARCH_INDEPENDENT_END_opcode);
  char IA32_RDTSC_opcode = (char)(152 + ARCH_INDEPENDENT_END_opcode);
  char IA32_ADDSS_opcode = (char)(153 + ARCH_INDEPENDENT_END_opcode);
  char IA32_SUBSS_opcode = (char)(154 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MULSS_opcode = (char)(155 + ARCH_INDEPENDENT_END_opcode);
  char IA32_DIVSS_opcode = (char)(156 + ARCH_INDEPENDENT_END_opcode);
  char IA32_ADDSD_opcode = (char)(157 + ARCH_INDEPENDENT_END_opcode);
  char IA32_SUBSD_opcode = (char)(158 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MULSD_opcode = (char)(159 + ARCH_INDEPENDENT_END_opcode);
  char IA32_DIVSD_opcode = (char)(160 + ARCH_INDEPENDENT_END_opcode);
  char IA32_ANDPS_opcode = (char)(161 + ARCH_INDEPENDENT_END_opcode);
  char IA32_ANDPD_opcode = (char)(162 + ARCH_INDEPENDENT_END_opcode);
  char IA32_ANDNPS_opcode = (char)(163 + ARCH_INDEPENDENT_END_opcode);
  char IA32_ANDNPD_opcode = (char)(164 + ARCH_INDEPENDENT_END_opcode);
  char IA32_ORPS_opcode = (char)(165 + ARCH_INDEPENDENT_END_opcode);
  char IA32_ORPD_opcode = (char)(166 + ARCH_INDEPENDENT_END_opcode);
  char IA32_XORPS_opcode = (char)(167 + ARCH_INDEPENDENT_END_opcode);
  char IA32_XORPD_opcode = (char)(168 + ARCH_INDEPENDENT_END_opcode);
  char IA32_UCOMISS_opcode = (char)(169 + ARCH_INDEPENDENT_END_opcode);
  char IA32_UCOMISD_opcode = (char)(170 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPEQSS_opcode = (char)(171 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPLTSS_opcode = (char)(172 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPLESS_opcode = (char)(173 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPUNORDSS_opcode = (char)(174 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPNESS_opcode = (char)(175 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPNLTSS_opcode = (char)(176 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPNLESS_opcode = (char)(177 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPORDSS_opcode = (char)(178 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPEQSD_opcode = (char)(179 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPLTSD_opcode = (char)(180 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPLESD_opcode = (char)(181 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPUNORDSD_opcode = (char)(182 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPNESD_opcode = (char)(183 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPNLTSD_opcode = (char)(184 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPNLESD_opcode = (char)(185 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CMPORDSD_opcode = (char)(186 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOVLPD_opcode = (char)(187 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOVLPS_opcode = (char)(188 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOVSS_opcode = (char)(189 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOVSD_opcode = (char)(190 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOVD_opcode = (char)(191 + ARCH_INDEPENDENT_END_opcode);
  char IA32_MOVQ_opcode = (char)(192 + ARCH_INDEPENDENT_END_opcode);
  char IA32_PSLLQ_opcode = (char)(193 + ARCH_INDEPENDENT_END_opcode);
  char IA32_PSRLQ_opcode = (char)(194 + ARCH_INDEPENDENT_END_opcode);
  char IA32_SQRTSS_opcode = (char)(195 + ARCH_INDEPENDENT_END_opcode);
  char IA32_SQRTSD_opcode = (char)(196 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CVTSI2SS_opcode = (char)(197 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CVTSS2SD_opcode = (char)(198 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CVTSS2SI_opcode = (char)(199 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CVTTSS2SI_opcode = (char)(200 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CVTSI2SD_opcode = (char)(201 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CVTSD2SS_opcode = (char)(202 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CVTSD2SI_opcode = (char)(203 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CVTTSD2SI_opcode = (char)(204 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CVTSI2SDQ_opcode = (char)(205 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CVTSD2SIQ_opcode = (char)(206 + ARCH_INDEPENDENT_END_opcode);
  char IA32_CVTTSD2SIQ_opcode = (char)(207 + ARCH_INDEPENDENT_END_opcode);
  char MIR_END_opcode = (char)(208 + ARCH_INDEPENDENT_END_opcode);


  Operator GET_CAUGHT_EXCEPTION = Operator.OperatorArray[0];
  Operator SET_CAUGHT_EXCEPTION = Operator.OperatorArray[1];
  Operator NEW = Operator.OperatorArray[2];
  Operator NEW_UNRESOLVED = Operator.OperatorArray[3];
  Operator NEWARRAY = Operator.OperatorArray[4];
  Operator NEWARRAY_UNRESOLVED = Operator.OperatorArray[5];
  Operator ATHROW = Operator.OperatorArray[6];
  Operator CHECKCAST = Operator.OperatorArray[7];
  Operator CHECKCAST_NOTNULL = Operator.OperatorArray[8];
  Operator CHECKCAST_UNRESOLVED = Operator.OperatorArray[9];
  Operator MUST_IMPLEMENT_INTERFACE = Operator.OperatorArray[10];
  Operator INSTANCEOF = Operator.OperatorArray[11];
  Operator INSTANCEOF_NOTNULL = Operator.OperatorArray[12];
  Operator INSTANCEOF_UNRESOLVED = Operator.OperatorArray[13];
  Operator MONITORENTER = Operator.OperatorArray[14];
  Operator MONITOREXIT = Operator.OperatorArray[15];
  Operator NEWOBJMULTIARRAY = Operator.OperatorArray[16];
  Operator GETSTATIC = Operator.OperatorArray[17];
  Operator PUTSTATIC = Operator.OperatorArray[18];
  Operator GETFIELD = Operator.OperatorArray[19];
  Operator PUTFIELD = Operator.OperatorArray[20];
  Operator INT_ZERO_CHECK = Operator.OperatorArray[21];
  Operator LONG_ZERO_CHECK = Operator.OperatorArray[22];
  Operator BOUNDS_CHECK = Operator.OperatorArray[23];
  Operator OBJARRAY_STORE_CHECK = Operator.OperatorArray[24];
  Operator OBJARRAY_STORE_CHECK_NOTNULL = Operator.OperatorArray[25];
  Operator IG_PATCH_POINT = Operator.OperatorArray[26];
  Operator IG_CLASS_TEST = Operator.OperatorArray[27];
  Operator IG_METHOD_TEST = Operator.OperatorArray[28];
  Operator TABLESWITCH = Operator.OperatorArray[29];
  Operator LOOKUPSWITCH = Operator.OperatorArray[30];
  Operator INT_ALOAD = Operator.OperatorArray[31];
  Operator LONG_ALOAD = Operator.OperatorArray[32];
  Operator FLOAT_ALOAD = Operator.OperatorArray[33];
  Operator DOUBLE_ALOAD = Operator.OperatorArray[34];
  Operator REF_ALOAD = Operator.OperatorArray[35];
  Operator UBYTE_ALOAD = Operator.OperatorArray[36];
  Operator BYTE_ALOAD = Operator.OperatorArray[37];
  Operator USHORT_ALOAD = Operator.OperatorArray[38];
  Operator SHORT_ALOAD = Operator.OperatorArray[39];
  Operator INT_ASTORE = Operator.OperatorArray[40];
  Operator LONG_ASTORE = Operator.OperatorArray[41];
  Operator FLOAT_ASTORE = Operator.OperatorArray[42];
  Operator DOUBLE_ASTORE = Operator.OperatorArray[43];
  Operator REF_ASTORE = Operator.OperatorArray[44];
  Operator BYTE_ASTORE = Operator.OperatorArray[45];
  Operator SHORT_ASTORE = Operator.OperatorArray[46];
  Operator INT_IFCMP = Operator.OperatorArray[47];
  Operator INT_IFCMP2 = Operator.OperatorArray[48];
  Operator LONG_IFCMP = Operator.OperatorArray[49];
  Operator FLOAT_IFCMP = Operator.OperatorArray[50];
  Operator DOUBLE_IFCMP = Operator.OperatorArray[51];
  Operator REF_IFCMP = Operator.OperatorArray[52];
  Operator LABEL = Operator.OperatorArray[53];
  Operator BBEND = Operator.OperatorArray[54];
  Operator UNINT_BEGIN = Operator.OperatorArray[55];
  Operator UNINT_END = Operator.OperatorArray[56];
  Operator FENCE = Operator.OperatorArray[57];
  Operator READ_CEILING = Operator.OperatorArray[58];
  Operator WRITE_FLOOR = Operator.OperatorArray[59];
  Operator PHI = Operator.OperatorArray[60];
  Operator SPLIT = Operator.OperatorArray[61];
  Operator PI = Operator.OperatorArray[62];
  Operator NOP = Operator.OperatorArray[63];
  Operator INT_MOVE = Operator.OperatorArray[64];
  Operator LONG_MOVE = Operator.OperatorArray[65];
  Operator FLOAT_MOVE = Operator.OperatorArray[66];
  Operator DOUBLE_MOVE = Operator.OperatorArray[67];
  Operator REF_MOVE = Operator.OperatorArray[68];
  Operator GUARD_MOVE = Operator.OperatorArray[69];
  Operator INT_COND_MOVE = Operator.OperatorArray[70];
  Operator LONG_COND_MOVE = Operator.OperatorArray[71];
  Operator FLOAT_COND_MOVE = Operator.OperatorArray[72];
  Operator DOUBLE_COND_MOVE = Operator.OperatorArray[73];
  Operator REF_COND_MOVE = Operator.OperatorArray[74];
  Operator GUARD_COND_MOVE = Operator.OperatorArray[75];
  Operator GUARD_COMBINE = Operator.OperatorArray[76];
  Operator REF_ADD = Operator.OperatorArray[77];
  Operator INT_ADD = Operator.OperatorArray[78];
  Operator LONG_ADD = Operator.OperatorArray[79];
  Operator FLOAT_ADD = Operator.OperatorArray[80];
  Operator DOUBLE_ADD = Operator.OperatorArray[81];
  Operator REF_SUB = Operator.OperatorArray[82];
  Operator INT_SUB = Operator.OperatorArray[83];
  Operator LONG_SUB = Operator.OperatorArray[84];
  Operator FLOAT_SUB = Operator.OperatorArray[85];
  Operator DOUBLE_SUB = Operator.OperatorArray[86];
  Operator INT_MUL = Operator.OperatorArray[87];
  Operator LONG_MUL = Operator.OperatorArray[88];
  Operator FLOAT_MUL = Operator.OperatorArray[89];
  Operator DOUBLE_MUL = Operator.OperatorArray[90];
  Operator INT_DIV = Operator.OperatorArray[91];
  Operator LONG_DIV = Operator.OperatorArray[92];
  Operator FLOAT_DIV = Operator.OperatorArray[93];
  Operator DOUBLE_DIV = Operator.OperatorArray[94];
  Operator INT_REM = Operator.OperatorArray[95];
  Operator LONG_REM = Operator.OperatorArray[96];
  Operator FLOAT_REM = Operator.OperatorArray[97];
  Operator DOUBLE_REM = Operator.OperatorArray[98];
  Operator REF_NEG = Operator.OperatorArray[99];
  Operator INT_NEG = Operator.OperatorArray[100];
  Operator LONG_NEG = Operator.OperatorArray[101];
  Operator FLOAT_NEG = Operator.OperatorArray[102];
  Operator DOUBLE_NEG = Operator.OperatorArray[103];
  Operator FLOAT_SQRT = Operator.OperatorArray[104];
  Operator DOUBLE_SQRT = Operator.OperatorArray[105];
  Operator REF_SHL = Operator.OperatorArray[106];
  Operator INT_SHL = Operator.OperatorArray[107];
  Operator LONG_SHL = Operator.OperatorArray[108];
  Operator REF_SHR = Operator.OperatorArray[109];
  Operator INT_SHR = Operator.OperatorArray[110];
  Operator LONG_SHR = Operator.OperatorArray[111];
  Operator REF_USHR = Operator.OperatorArray[112];
  Operator INT_USHR = Operator.OperatorArray[113];
  Operator LONG_USHR = Operator.OperatorArray[114];
  Operator REF_AND = Operator.OperatorArray[115];
  Operator INT_AND = Operator.OperatorArray[116];
  Operator LONG_AND = Operator.OperatorArray[117];
  Operator REF_OR = Operator.OperatorArray[118];
  Operator INT_OR = Operator.OperatorArray[119];
  Operator LONG_OR = Operator.OperatorArray[120];
  Operator REF_XOR = Operator.OperatorArray[121];
  Operator INT_XOR = Operator.OperatorArray[122];
  Operator REF_NOT = Operator.OperatorArray[123];
  Operator INT_NOT = Operator.OperatorArray[124];
  Operator LONG_NOT = Operator.OperatorArray[125];
  Operator LONG_XOR = Operator.OperatorArray[126];
  Operator INT_2ADDRSigExt = Operator.OperatorArray[127];
  Operator INT_2ADDRZerExt = Operator.OperatorArray[128];
  Operator LONG_2ADDR = Operator.OperatorArray[129];
  Operator ADDR_2INT = Operator.OperatorArray[130];
  Operator ADDR_2LONG = Operator.OperatorArray[131];
  Operator INT_2LONG = Operator.OperatorArray[132];
  Operator INT_2FLOAT = Operator.OperatorArray[133];
  Operator INT_2DOUBLE = Operator.OperatorArray[134];
  Operator LONG_2INT = Operator.OperatorArray[135];
  Operator LONG_2FLOAT = Operator.OperatorArray[136];
  Operator LONG_2DOUBLE = Operator.OperatorArray[137];
  Operator FLOAT_2INT = Operator.OperatorArray[138];
  Operator FLOAT_2LONG = Operator.OperatorArray[139];
  Operator FLOAT_2DOUBLE = Operator.OperatorArray[140];
  Operator DOUBLE_2INT = Operator.OperatorArray[141];
  Operator DOUBLE_2LONG = Operator.OperatorArray[142];
  Operator DOUBLE_2FLOAT = Operator.OperatorArray[143];
  Operator INT_2BYTE = Operator.OperatorArray[144];
  Operator INT_2USHORT = Operator.OperatorArray[145];
  Operator INT_2SHORT = Operator.OperatorArray[146];
  Operator LONG_CMP = Operator.OperatorArray[147];
  Operator FLOAT_CMPL = Operator.OperatorArray[148];
  Operator FLOAT_CMPG = Operator.OperatorArray[149];
  Operator DOUBLE_CMPL = Operator.OperatorArray[150];
  Operator DOUBLE_CMPG = Operator.OperatorArray[151];
  Operator RETURN = Operator.OperatorArray[152];
  Operator NULL_CHECK = Operator.OperatorArray[153];
  Operator GOTO = Operator.OperatorArray[154];
  Operator BOOLEAN_NOT = Operator.OperatorArray[155];
  Operator BOOLEAN_CMP_INT = Operator.OperatorArray[156];
  Operator BOOLEAN_CMP_ADDR = Operator.OperatorArray[157];
  Operator BOOLEAN_CMP_LONG = Operator.OperatorArray[158];
  Operator BOOLEAN_CMP_FLOAT = Operator.OperatorArray[159];
  Operator BOOLEAN_CMP_DOUBLE = Operator.OperatorArray[160];
  Operator BYTE_LOAD = Operator.OperatorArray[161];
  Operator UBYTE_LOAD = Operator.OperatorArray[162];
  Operator SHORT_LOAD = Operator.OperatorArray[163];
  Operator USHORT_LOAD = Operator.OperatorArray[164];
  Operator REF_LOAD = Operator.OperatorArray[165];
  Operator REF_STORE = Operator.OperatorArray[166];
  Operator INT_LOAD = Operator.OperatorArray[167];
  Operator LONG_LOAD = Operator.OperatorArray[168];
  Operator FLOAT_LOAD = Operator.OperatorArray[169];
  Operator DOUBLE_LOAD = Operator.OperatorArray[170];
  Operator BYTE_STORE = Operator.OperatorArray[171];
  Operator SHORT_STORE = Operator.OperatorArray[172];
  Operator INT_STORE = Operator.OperatorArray[173];
  Operator LONG_STORE = Operator.OperatorArray[174];
  Operator FLOAT_STORE = Operator.OperatorArray[175];
  Operator DOUBLE_STORE = Operator.OperatorArray[176];
  Operator PREPARE_INT = Operator.OperatorArray[177];
  Operator PREPARE_ADDR = Operator.OperatorArray[178];
  Operator PREPARE_LONG = Operator.OperatorArray[179];
  Operator ATTEMPT_INT = Operator.OperatorArray[180];
  Operator ATTEMPT_ADDR = Operator.OperatorArray[181];
  Operator ATTEMPT_LONG = Operator.OperatorArray[182];
  Operator CALL = Operator.OperatorArray[183];
  Operator SYSCALL = Operator.OperatorArray[184];
  Operator YIELDPOINT_PROLOGUE = Operator.OperatorArray[185];
  Operator YIELDPOINT_EPILOGUE = Operator.OperatorArray[186];
  Operator YIELDPOINT_BACKEDGE = Operator.OperatorArray[187];
  Operator YIELDPOINT_OSR = Operator.OperatorArray[188];
  Operator OSR_BARRIER = Operator.OperatorArray[189];
  Operator IR_PROLOGUE = Operator.OperatorArray[190];
  Operator RESOLVE = Operator.OperatorArray[191];
  Operator RESOLVE_MEMBER = Operator.OperatorArray[192];
  Operator GET_TIME_BASE = Operator.OperatorArray[193];
  Operator INSTRUMENTED_EVENT_COUNTER = Operator.OperatorArray[194];
  Operator TRAP_IF = Operator.OperatorArray[195];
  Operator TRAP = Operator.OperatorArray[196];
  Operator FLOAT_AS_INT_BITS = Operator.OperatorArray[197];
  Operator INT_BITS_AS_FLOAT = Operator.OperatorArray[198];
  Operator DOUBLE_AS_LONG_BITS = Operator.OperatorArray[199];
  Operator LONG_BITS_AS_DOUBLE = Operator.OperatorArray[200];
  Operator ARRAYLENGTH = Operator.OperatorArray[201];
  Operator GET_OBJ_TIB = Operator.OperatorArray[202];
  Operator GET_CLASS_TIB = Operator.OperatorArray[203];
  Operator GET_TYPE_FROM_TIB = Operator.OperatorArray[204];
  Operator GET_SUPERCLASS_IDS_FROM_TIB = Operator.OperatorArray[205];
  Operator GET_DOES_IMPLEMENT_FROM_TIB = Operator.OperatorArray[206];
  Operator GET_ARRAY_ELEMENT_TIB_FROM_TIB = Operator.OperatorArray[207];
  Operator LOWTABLESWITCH = Operator.OperatorArray[208];
  //////////////////////////
  // END   Architecture Independent opcodes.
  // BEGIN Architecture Dependent opcodes & MIR.
  //////////////////////////
  Operator ADDRESS_CONSTANT = Operator.OperatorArray[0+ARCH_INDEPENDENT_END_opcode];
  Operator INT_CONSTANT = Operator.OperatorArray[1+ARCH_INDEPENDENT_END_opcode];
  Operator LONG_CONSTANT = Operator.OperatorArray[2+ARCH_INDEPENDENT_END_opcode];
  Operator REGISTER = Operator.OperatorArray[3+ARCH_INDEPENDENT_END_opcode];
  Operator OTHER_OPERAND = Operator.OperatorArray[4+ARCH_INDEPENDENT_END_opcode];
  Operator NULL = Operator.OperatorArray[5+ARCH_INDEPENDENT_END_opcode];
  Operator BRANCH_TARGET = Operator.OperatorArray[6+ARCH_INDEPENDENT_END_opcode];
  Operator MATERIALIZE_FP_CONSTANT = Operator.OperatorArray[7+ARCH_INDEPENDENT_END_opcode];
  Operator GET_CURRENT_PROCESSOR = Operator.OperatorArray[8+ARCH_INDEPENDENT_END_opcode];
  Operator ROUND_TO_ZERO = Operator.OperatorArray[9+ARCH_INDEPENDENT_END_opcode];
  Operator CLEAR_FLOATING_POINT_STATE = Operator.OperatorArray[10+ARCH_INDEPENDENT_END_opcode];
  Operator PREFETCH = Operator.OperatorArray[11+ARCH_INDEPENDENT_END_opcode];
  Operator PAUSE = Operator.OperatorArray[12+ARCH_INDEPENDENT_END_opcode];
  Operator FP_ADD = Operator.OperatorArray[13+ARCH_INDEPENDENT_END_opcode];
  Operator FP_SUB = Operator.OperatorArray[14+ARCH_INDEPENDENT_END_opcode];
  Operator FP_MUL = Operator.OperatorArray[15+ARCH_INDEPENDENT_END_opcode];
  Operator FP_DIV = Operator.OperatorArray[16+ARCH_INDEPENDENT_END_opcode];
  Operator FP_NEG = Operator.OperatorArray[17+ARCH_INDEPENDENT_END_opcode];
  Operator FP_REM = Operator.OperatorArray[18+ARCH_INDEPENDENT_END_opcode];
  Operator INT_2FP = Operator.OperatorArray[19+ARCH_INDEPENDENT_END_opcode];
  Operator LONG_2FP = Operator.OperatorArray[20+ARCH_INDEPENDENT_END_opcode];
  Operator CMP_CMOV = Operator.OperatorArray[21+ARCH_INDEPENDENT_END_opcode];
  Operator FCMP_CMOV = Operator.OperatorArray[22+ARCH_INDEPENDENT_END_opcode];
  Operator LCMP_CMOV = Operator.OperatorArray[23+ARCH_INDEPENDENT_END_opcode];
  Operator CMP_FCMOV = Operator.OperatorArray[24+ARCH_INDEPENDENT_END_opcode];
  Operator FCMP_FCMOV = Operator.OperatorArray[25+ARCH_INDEPENDENT_END_opcode];
  Operator CALL_SAVE_VOLATILE = Operator.OperatorArray[26+ARCH_INDEPENDENT_END_opcode];
  Operator MIR_START = Operator.OperatorArray[27+ARCH_INDEPENDENT_END_opcode];
  Operator REQUIRE_ESP = Operator.OperatorArray[28+ARCH_INDEPENDENT_END_opcode];
  Operator ADVISE_ESP = Operator.OperatorArray[29+ARCH_INDEPENDENT_END_opcode];
  Operator MIR_LOWTABLESWITCH = Operator.OperatorArray[30+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_METHODSTART = Operator.OperatorArray[31+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FCLEAR = Operator.OperatorArray[32+ARCH_INDEPENDENT_END_opcode];
  Operator DUMMY_DEF = Operator.OperatorArray[33+ARCH_INDEPENDENT_END_opcode];
  Operator DUMMY_USE = Operator.OperatorArray[34+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FMOV_ENDING_LIVE_RANGE = Operator.OperatorArray[35+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FMOV = Operator.OperatorArray[36+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_TRAPIF = Operator.OperatorArray[37+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_OFFSET = Operator.OperatorArray[38+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_LOCK_CMPXCHG = Operator.OperatorArray[39+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_LOCK_CMPXCHG8B = Operator.OperatorArray[40+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_ADC = Operator.OperatorArray[41+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_ADD = Operator.OperatorArray[42+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_AND = Operator.OperatorArray[43+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_BSWAP = Operator.OperatorArray[44+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_BT = Operator.OperatorArray[45+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_BTC = Operator.OperatorArray[46+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_BTR = Operator.OperatorArray[47+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_BTS = Operator.OperatorArray[48+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_SYSCALL = Operator.OperatorArray[49+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CALL = Operator.OperatorArray[50+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CDQ = Operator.OperatorArray[51+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CDO = Operator.OperatorArray[52+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CDQE = Operator.OperatorArray[53+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMOV = Operator.OperatorArray[54+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMP = Operator.OperatorArray[55+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPXCHG = Operator.OperatorArray[56+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPXCHG8B = Operator.OperatorArray[57+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_DEC = Operator.OperatorArray[58+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_DIV = Operator.OperatorArray[59+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FADD = Operator.OperatorArray[60+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FADDP = Operator.OperatorArray[61+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FCHS = Operator.OperatorArray[62+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FCMOV = Operator.OperatorArray[63+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FCOMI = Operator.OperatorArray[64+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FCOMIP = Operator.OperatorArray[65+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FDIV = Operator.OperatorArray[66+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FDIVP = Operator.OperatorArray[67+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FDIVR = Operator.OperatorArray[68+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FDIVRP = Operator.OperatorArray[69+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FEXAM = Operator.OperatorArray[70+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FXCH = Operator.OperatorArray[71+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FFREE = Operator.OperatorArray[72+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FIADD = Operator.OperatorArray[73+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FIDIV = Operator.OperatorArray[74+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FIDIVR = Operator.OperatorArray[75+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FILD = Operator.OperatorArray[76+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FIMUL = Operator.OperatorArray[77+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FINIT = Operator.OperatorArray[78+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FIST = Operator.OperatorArray[79+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FISTP = Operator.OperatorArray[80+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FISUB = Operator.OperatorArray[81+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FISUBR = Operator.OperatorArray[82+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FLD = Operator.OperatorArray[83+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FLDCW = Operator.OperatorArray[84+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FLD1 = Operator.OperatorArray[85+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FLDL2T = Operator.OperatorArray[86+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FLDL2E = Operator.OperatorArray[87+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FLDPI = Operator.OperatorArray[88+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FLDLG2 = Operator.OperatorArray[89+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FLDLN2 = Operator.OperatorArray[90+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FLDZ = Operator.OperatorArray[91+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FMUL = Operator.OperatorArray[92+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FMULP = Operator.OperatorArray[93+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FNSTCW = Operator.OperatorArray[94+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FNINIT = Operator.OperatorArray[95+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FNSAVE = Operator.OperatorArray[96+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FPREM = Operator.OperatorArray[97+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FRSTOR = Operator.OperatorArray[98+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FST = Operator.OperatorArray[99+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FSTCW = Operator.OperatorArray[100+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FSTP = Operator.OperatorArray[101+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FSUB = Operator.OperatorArray[102+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FSUBP = Operator.OperatorArray[103+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FSUBR = Operator.OperatorArray[104+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FSUBRP = Operator.OperatorArray[105+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FUCOMI = Operator.OperatorArray[106+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_FUCOMIP = Operator.OperatorArray[107+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_IDIV = Operator.OperatorArray[108+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_IMUL1 = Operator.OperatorArray[109+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_IMUL2 = Operator.OperatorArray[110+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_INC = Operator.OperatorArray[111+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_INT = Operator.OperatorArray[112+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_JCC = Operator.OperatorArray[113+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_JCC2 = Operator.OperatorArray[114+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_JMP = Operator.OperatorArray[115+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_LEA = Operator.OperatorArray[116+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_LOCK = Operator.OperatorArray[117+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOV = Operator.OperatorArray[118+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOVZX__B = Operator.OperatorArray[119+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOVSX__B = Operator.OperatorArray[120+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOVZX__W = Operator.OperatorArray[121+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOVSX__W = Operator.OperatorArray[122+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOVZXQ__B = Operator.OperatorArray[123+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOVSXQ__B = Operator.OperatorArray[124+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOVZXQ__W = Operator.OperatorArray[125+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOVSXQ__W = Operator.OperatorArray[126+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MUL = Operator.OperatorArray[127+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_NEG = Operator.OperatorArray[128+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_NOT = Operator.OperatorArray[129+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_OR = Operator.OperatorArray[130+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MFENCE = Operator.OperatorArray[131+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_PAUSE = Operator.OperatorArray[132+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_PREFETCHNTA = Operator.OperatorArray[133+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_POP = Operator.OperatorArray[134+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_PUSH = Operator.OperatorArray[135+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_RCL = Operator.OperatorArray[136+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_RCR = Operator.OperatorArray[137+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_ROL = Operator.OperatorArray[138+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_ROR = Operator.OperatorArray[139+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_RET = Operator.OperatorArray[140+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_SAL = Operator.OperatorArray[141+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_SAR = Operator.OperatorArray[142+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_SHL = Operator.OperatorArray[143+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_SHR = Operator.OperatorArray[144+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_SBB = Operator.OperatorArray[145+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_SET__B = Operator.OperatorArray[146+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_SHLD = Operator.OperatorArray[147+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_SHRD = Operator.OperatorArray[148+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_SUB = Operator.OperatorArray[149+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_TEST = Operator.OperatorArray[150+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_XOR = Operator.OperatorArray[151+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_RDTSC = Operator.OperatorArray[152+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_ADDSS = Operator.OperatorArray[153+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_SUBSS = Operator.OperatorArray[154+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MULSS = Operator.OperatorArray[155+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_DIVSS = Operator.OperatorArray[156+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_ADDSD = Operator.OperatorArray[157+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_SUBSD = Operator.OperatorArray[158+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MULSD = Operator.OperatorArray[159+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_DIVSD = Operator.OperatorArray[160+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_ANDPS = Operator.OperatorArray[161+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_ANDPD = Operator.OperatorArray[162+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_ANDNPS = Operator.OperatorArray[163+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_ANDNPD = Operator.OperatorArray[164+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_ORPS = Operator.OperatorArray[165+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_ORPD = Operator.OperatorArray[166+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_XORPS = Operator.OperatorArray[167+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_XORPD = Operator.OperatorArray[168+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_UCOMISS = Operator.OperatorArray[169+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_UCOMISD = Operator.OperatorArray[170+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPEQSS = Operator.OperatorArray[171+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPLTSS = Operator.OperatorArray[172+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPLESS = Operator.OperatorArray[173+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPUNORDSS = Operator.OperatorArray[174+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPNESS = Operator.OperatorArray[175+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPNLTSS = Operator.OperatorArray[176+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPNLESS = Operator.OperatorArray[177+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPORDSS = Operator.OperatorArray[178+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPEQSD = Operator.OperatorArray[179+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPLTSD = Operator.OperatorArray[180+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPLESD = Operator.OperatorArray[181+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPUNORDSD = Operator.OperatorArray[182+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPNESD = Operator.OperatorArray[183+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPNLTSD = Operator.OperatorArray[184+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPNLESD = Operator.OperatorArray[185+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CMPORDSD = Operator.OperatorArray[186+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOVLPD = Operator.OperatorArray[187+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOVLPS = Operator.OperatorArray[188+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOVSS = Operator.OperatorArray[189+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOVSD = Operator.OperatorArray[190+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOVD = Operator.OperatorArray[191+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_MOVQ = Operator.OperatorArray[192+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_PSLLQ = Operator.OperatorArray[193+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_PSRLQ = Operator.OperatorArray[194+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_SQRTSS = Operator.OperatorArray[195+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_SQRTSD = Operator.OperatorArray[196+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CVTSI2SS = Operator.OperatorArray[197+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CVTSS2SD = Operator.OperatorArray[198+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CVTSS2SI = Operator.OperatorArray[199+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CVTTSS2SI = Operator.OperatorArray[200+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CVTSI2SD = Operator.OperatorArray[201+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CVTSD2SS = Operator.OperatorArray[202+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CVTSD2SI = Operator.OperatorArray[203+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CVTTSD2SI = Operator.OperatorArray[204+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CVTSI2SDQ = Operator.OperatorArray[205+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CVTSD2SIQ = Operator.OperatorArray[206+ARCH_INDEPENDENT_END_opcode];
  Operator IA32_CVTTSD2SIQ = Operator.OperatorArray[207+ARCH_INDEPENDENT_END_opcode];
  Operator MIR_END = Operator.OperatorArray[208+ARCH_INDEPENDENT_END_opcode];


}
